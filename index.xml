<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Course materials | Network Science</title>
    <link>https://uvaDS8104.github.io/</link>
      <atom:link href="https://uvaDS8104.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Course materials</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <image>
      <url>https://uvaDS8104.github.io/img/social-image.png</url>
      <title>Course materials</title>
      <link>https://uvaDS8104.github.io/</link>
    </image>
    
    <item>
      <title>Mini project 1</title>
      <link>https://uvaDS8104.github.io/assignment/01-mini-project/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/assignment/01-mini-project/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#instructions&#34;&gt;Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#starter-code&#34;&gt;Starter code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;New York City is full of urban wildlife, and rats are one of the city’s most infamous animal mascots. Rats in NYC are plentiful, but they also deliver food, so they’re useful too.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/PeJUqcbool4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;NYC keeps incredibly detailed data regarding animal sightings, including rats, and &lt;a href=&#34;https://www.kaggle.com/new-york-city/nyc-rat-sightings/data&#34;&gt;it makes this data publicly available&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this first mini project, you will use &lt;strong&gt;R and ggplot2&lt;/strong&gt; to tell an interesting story hidden in the data. You can recreate one of these ugly, less-than-helpful graphs, or create a new story by looking at other variables in the data:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/assignments/rat_examples.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;instructions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Instructions&lt;/h2&gt;
&lt;p&gt;Here’s what you need to do:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; a new RStudio project and place it on your computer somewhere. Open that new folder in Windows File Explorer or macOS Finder (however you navigate around the files on your computer), and create two subfolders there named &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt; New York City’s database of rat sightings since 2010:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andrewheiss/datavizf18.classes.andrewheiss.com/master/static/data/Rat_Sightings.csv&#34; target=&#34;_blank&#34; download&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;Rat_Sightings.csv&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Place this in the &lt;code&gt;data&lt;/code&gt; subfolder you created in step 1. You might need to right click on this link and choose “Save link as…”, since your browser may try to display it as text. The data was originally &lt;a href=&#34;https://www.kaggle.com/new-york-city/nyc-rat-sightings/data&#34;&gt;uploaded by the City of New York to Kaggle&lt;/a&gt;, and is provided with a public domain license.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; a new R Markdown file and save it in your project. In RStudio go to File &amp;gt; New File &amp;gt; R Markdown…, choose the default options, and delete all the placeholder text in the new file except for the metadata at the top, which is between &lt;code&gt;---&lt;/code&gt; and &lt;code&gt;---&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verify&lt;/strong&gt; that your project folder is structured like this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;your-project-name/
  your-analysis.Rmd
  your-project-name.Rproj
  data/
    Rat_Sightings.csv
  output/
    NOTHING&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Summarize&lt;/strong&gt; the data somehow. The raw data has more than 100,000 rows, which means you’ll need to aggregate the data (&lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;group_by()&lt;/code&gt;, and &lt;code&gt;summarize()&lt;/code&gt; will be your friends). Consider looking at the number of sightings per borough, per year, per dwelling type, etc., or a combination of these, like the change in the number sightings across the 5 boroughs between 2010 and 2016.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; an appropriate visualization based on the data you summarized.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write&lt;/strong&gt; a memo (no word limit) explaining your process. I’m specifically looking for a discussion of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What was wrong with the original graphic (if you’re fixing one of the original figures)?&lt;/li&gt;
&lt;li&gt;What story are you telling with your new graphic?&lt;/li&gt;
&lt;li&gt;How did you apply the principles of CRAP?&lt;/li&gt;
&lt;li&gt;How did you apply Kieran Healy’s principles of great visualizations or Alberto Cairo’s five qualities of great visualizations?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Upload&lt;/strong&gt; the following outputs to iCollege:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A PDF or Word file of your memo with your final code and graphic embedded in it.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; This means you’ll need to do all your coding in an R Markdown file and embed your code in chunks.&lt;/li&gt;
&lt;li&gt;A standalone PNG version of your graphic. Use &lt;code&gt;ggsave(plot_name, filename = &#34;output/blah.png&#34;, width = XX, height = XX)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A standalone PDF version of your graphic. Use &lt;code&gt;ggsave(plot_name, filename = &#34;output/blah.pdf&#34;, width = XX, height = XX)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will be graded based on completion using the standard ✓ system, but I’ll provide comments on how you use R and &lt;strong&gt;ggplot2&lt;/strong&gt;, how well you apply the principles of CRAP, &lt;em&gt;The Truthful Art&lt;/em&gt;, and &lt;em&gt;Effective Data Visualization&lt;/em&gt;, and how appropriate the graph is for the data and the story you’re telling. I will use &lt;a href=&#34;https://uvaDS8104.github.io/files/mini-project-1-rubric.pdf&#34;&gt;this rubric&lt;/a&gt; to make comments and provide you with a simulated grade.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/mini-project-1-rubric.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; &lt;code&gt;mini-project-1-rubric.pdf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this assignment, I am less concerned with detailed graphic design principles—select appropriate colors, change fonts if you’re brave, and choose a nice ggplot theme and make some adjustments like moving the legend around (&lt;code&gt;theme(legend.position = &#34;bottom&#34;)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The assignment is due by 11:59 PM on Friday, May 226&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please seek out help when you need it!&lt;/strong&gt; You know enough R (and have enough examples of code from class and your readings) to be able to do this. Your project has to be turned in individually, and your visualization should be your own (i.e. if you work with others, don’t all turn in the same graph), but you should work with others! Reach out to me for help too—I’m here to help!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You can do this,&lt;/em&gt; and you’ll feel like a budding dataviz witch/wizard when you’re done.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;starter-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Starter code&lt;/h2&gt;
&lt;p&gt;I’ve provided some starter code below. A couple comments about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By default, &lt;code&gt;read_csv()&lt;/code&gt; treats cells that are empty or “NA” as missing values. This rat dataset uses “N/A” to mark missing values, so we need to add that as a possible marker of missingness (hence &lt;code&gt;na = c(&#34;&#34;, &#34;NA&#34;, &#34;N/A&#34;)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;To make life easier, I’ve renamed some of the key variables you might work with. You can rename others if you want.&lt;/li&gt;
&lt;li&gt;I’ve also created a few date-related variables (&lt;code&gt;sighting_year&lt;/code&gt;, &lt;code&gt;sighting_month&lt;/code&gt;, &lt;code&gt;sighting_day&lt;/code&gt;, and &lt;code&gt;sighting_weekday&lt;/code&gt;). You don’t have to use them, but they’re there if you need them. The functions that create these, like &lt;code&gt;year()&lt;/code&gt; and &lt;code&gt;wday()&lt;/code&gt; are part of the &lt;strong&gt;lubridate&lt;/strong&gt; library.&lt;/li&gt;
&lt;li&gt;The date/time variables are formatted like &lt;code&gt;04/03/2017 12:00:00 AM&lt;/code&gt;, which R is not able to automatically parse as a date when reading the CSV file. You can use the &lt;code&gt;mdy_hms()&lt;/code&gt; function in the &lt;strong&gt;lubridate&lt;/strong&gt; library to parse dates that are structured as “month-day-year-hour-minute”. There are also a bunch of other iterations of this function, like &lt;code&gt;ymd()&lt;/code&gt;, &lt;code&gt;dmy()&lt;/code&gt;, etc., for other date formats.&lt;/li&gt;
&lt;li&gt;There’s one row with an unspecified borough, so I filter that out.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(lubridate)

rats_raw &amp;lt;- read_csv(&amp;quot;data/Rat_Sightings.csv&amp;quot;, na = c(&amp;quot;&amp;quot;, &amp;quot;NA&amp;quot;, &amp;quot;N/A&amp;quot;))

# If you get an error that says &amp;quot;All formats failed to parse. No formats
# found&amp;quot;, it&amp;#39;s because the mdy_hms function couldn&amp;#39;t parse the date. The date
# variable *should* be in this format: &amp;quot;04/03/2017 12:00:00 AM&amp;quot;, but in some
# rare instances, it might load without the seconds as &amp;quot;04/03/2017 12:00 AM&amp;quot;.
# If there are no seconds, use mdy_hm() instead of mdy_hms().
rats_clean &amp;lt;- rats_raw %&amp;gt;%
  rename(created_date = `Created Date`,
         location_type = `Location Type`,
         borough = Borough) %&amp;gt;%
  mutate(created_date = mdy_hms(created_date)) %&amp;gt;%
  mutate(sighting_year = year(created_date),
         sighting_month = month(created_date),
         sighting_day = day(created_date),
         sighting_weekday = wday(created_date, label = TRUE, abbr = FALSE)) %&amp;gt;%
  filter(borough != &amp;quot;Unspecified&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll summarize the data with functions from &lt;strong&gt;dplyr&lt;/strong&gt;, including stuff like &lt;code&gt;count()&lt;/code&gt;, &lt;code&gt;arrange()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;group_by()&lt;/code&gt;, &lt;code&gt;summarize()&lt;/code&gt;, and &lt;code&gt;mutate()&lt;/code&gt;. Here are some examples of ways to summarize the data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# See the count of rat sightings by weekday
rats_clean %&amp;gt;%
  count(sighting_weekday)

# Assign a summarized data frame to an object to use it in a plot
rats_by_weekday &amp;lt;- rats_clean %&amp;gt;%
  count(sighting_weekday, sighting_year)

ggplot(rats_by_weekday, aes(x = fct_rev(sighting_weekday), y = n)) + 
  geom_col() +
  coord_flip() +
  facet_wrap(~ sighting_year)

# See the count of rat sightings by weekday and borough
rats_clean %&amp;gt;%
  count(sighting_weekday, borough, sighting_year)

# An alternative to count() is to specify the groups with group_by() and then
# be explicit about how you&amp;#39;re summarizing the groups, such as calculating the
# mean, standard deviation, or number of observations (we do that here with
# `n()`).
rats_clean %&amp;gt;%
  group_by(sighting_weekday, borough) %&amp;gt;%
  summarize(n = n())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;You can approach this in a couple different ways—you can write the memo and then include the full figure and code at the end, &lt;a href=&#34;https://rud.is/b/2017/09/18/mapping-fall-foliage-with-sf/&#34;&gt;similar to this blog post&lt;/a&gt;, or you can write the memo in an incremental way, describing the different steps of creating the figure, ultimately arriving at a clean final figure, &lt;a href=&#34;https://rudeboybert.github.io/fivethirtyeight/articles/bechdel.html&#34;&gt;like this blog post&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to R and the tidyverse</title>
      <link>https://uvaDS8104.github.io/assignment/01-exercise/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/assignment/01-exercise/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#task-1-make-an-rstudio-project&#34;&gt;Task 1: Make an RStudio Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#task-2-make-an-r-markdown-file-with-a-plot-in-it&#34;&gt;Task 2: Make an R Markdown file with a plot in it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;task-1-make-an-rstudio-project&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 1: Make an RStudio Project&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Use either RStudio.cloud or RStudio on your computer (preferably RStudio on your computer! &lt;a href=&#34;https://uvaDS8104.github.io/resource/install/&#34;&gt;Follow these instructions to get started!&lt;/a&gt;) to create a new RStudio Project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a folder named “data” in the project folder you just made.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download this CSV file and place it in that folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/data/cars.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;cars.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In RStudio, go to “File” &amp;gt; “New File…” &amp;gt; “R Markdown…” and click “OK” in the dialog without changing anything.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delete all the placeholder text in that new file and replace it with this:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;---
title: &amp;quot;Exercise 1&amp;quot;
author: &amp;quot;Put your name here&amp;quot;
output: html_document
---

# Reflection

Replace this text with your reflection


# My first plot

```{r load-libraries-data, warning=FALSE, message=FALSE}
library(tidyverse)

cars &amp;lt;- read_csv(&amp;quot;data/cars.csv&amp;quot;)
```

Replace this line with a code chunk and use it to create a plot.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the R Markdown file with some sort of name (&lt;strong&gt;without any spaces!&lt;/strong&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your project folder should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/assignments/project-structure.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;task-2-make-an-r-markdown-file-with-a-plot-in-it&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task 2: Make an R Markdown file with a plot in it&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Add your reading reflection to the appropriate place in the R Markdown file. You can type directly in RStudio if you want (though there’s no spell checker), or you can type it in Word or Google Docs and then paste it into RStudio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove the text that says “Replace this line with a code chunk” and insert a new R code chunk. Either type &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on Windows, or &lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;⌥&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; on macOS, or use the “Insert Chunk” menu:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/assignments/insert-chunk-button.png&#34; width=&#34;19%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;ggplot()&lt;/code&gt; to create a scatterplot using the &lt;code&gt;mpg&lt;/code&gt; dataset. Use whatever variables you want. Type the code to create the plot in the new empty chunk.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Knit your document as a Word file (or PDF if you’re brave and &lt;a href=&#34;https://uvaDS8104.github.io/resource/install/#install-tinytex&#34;&gt;installed LaTeX&lt;/a&gt;). Use the “Knit” menu:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upload the knitted document to iCollege.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🎉 Party! 🎉&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;fyi&#34;&gt;
&lt;p&gt;You’ll be doing this same process for all your future exercises. Each exercise will involve an R Markdown file. You can either create a new RStudio Project directory for all your work:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/reference/rproj-one-folder.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or you can create individual projects for each assignment and mini-project:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/reference/rproj-multiple-folders.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to R and the tidyverse</title>
      <link>https://uvaDS8104.github.io/example/01-example/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/example/01-example/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-process-for-working-with-rstudio&#34;&gt;Basic process for working with RStudio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;basic-process-for-working-with-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic process for working with RStudio&lt;/h2&gt;
&lt;p&gt;For this example, I’m going to create a new RStudio project, download some data, put the data in the project, and make a graph of it using R Markdown. You’ll follow this same process any time you start a new project or exercise.&lt;/p&gt;
&lt;p&gt;To follow along, download this CSV file here (you may need to right click on it and select “Save As…”):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/data/gapminder.csv&#34;&gt;&lt;i class=&#34;fas fa-file-csv&#34;&gt;&lt;/i&gt; &lt;code&gt;gapminder.csv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s a video walkthrough of how to get started:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/kXlZbDZpfR0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to R and the tidyverse</title>
      <link>https://uvaDS8104.github.io/lesson/01-lesson/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/01-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#part-1-the-basics-of-r-and-dplyr&#34;&gt;Part 1: The basics of R and dplyr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#part-2-getting-familiar-with-rstudio&#34;&gt;Part 2: Getting familiar with RStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#part-3-rstudio-projects&#34;&gt;Part 3: RStudio Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#part-4-getting-familiar-with-r-markdown&#34;&gt;Part 4: Getting familiar with R Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;part-1-the-basics-of-r-and-dplyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part 1: The basics of R and dplyr&lt;/h2&gt;
&lt;p&gt;For the first part of today’s lesson, you need to work through a few of RStudio’s introductory primers. You’ll do these in your browser and type code and see results there.&lt;/p&gt;
&lt;p&gt;You’ll learn some of the basics of R, as well as some powerful methods for manipulating data with the &lt;strong&gt;dplyr&lt;/strong&gt; package.&lt;/p&gt;
&lt;p&gt;Complete these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Basics&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/1.1&#34;&gt;Visualization Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/1.2&#34;&gt;Programming Basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work with Data&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/2.1&#34;&gt;Working with Tibbles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/2.2&#34;&gt;Isolating Data with dplyr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/2.3&#34;&gt;Deriving Information with dplyr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The content from these primers comes from the (free and online!) book &lt;a href=&#34;https://r4ds.had.co.nz/&#34;&gt;&lt;em&gt;R for Data Science&lt;/em&gt; by Garrett Grolemund and Hadley Wickham&lt;/a&gt;. I highly recommend the book as a reference and for continuing to learn and use R in the future (like running regression models and other types of statistical analysis)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-2-getting-familiar-with-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part 2: Getting familiar with RStudio&lt;/h2&gt;
&lt;p&gt;The RStudio primers you just worked through are a great introduction to writing and running R code, but you typically won’t type code in a browser when you work with R. Instead, you’ll use a nicer programming environment like RStudio, which lets you type and save code in scripts, run code from those scripts, and see the output of that code, all in the same program.&lt;/p&gt;
&lt;p&gt;To get familiar with RStudio, watch this video:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/cnQ-v1UUWyE&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-3-rstudio-projects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part 3: RStudio Projects&lt;/h2&gt;
&lt;p&gt;One of the most powerful and useful aspects of RStudio is its ability to manage projects.&lt;/p&gt;
&lt;p&gt;When you first open R, it is “pointed” at some folder on your computer, and anything you do will be relative to that folder. The technical term for this is a “working directory.”&lt;/p&gt;
&lt;p&gt;When you first open RStudio, look in the area right at the top of the Console pane to see your current working directory. Most likely you’ll see something cryptic: &lt;code&gt;~/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/lesson/working-directory.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That tilde sign (&lt;code&gt;~&lt;/code&gt;) is a shortcut that stands for your user directory. On Windows this is &lt;code&gt;C:\Users\your_user_name\&lt;/code&gt;; on macOS this is &lt;code&gt;/Users/your_user_name/&lt;/code&gt;. With the working directory set to &lt;code&gt;~/&lt;/code&gt;, R is “pointed” at that folder, and anything you save will end up in that folder, and R will expect any data that you load to be there too.&lt;/p&gt;
&lt;p&gt;It’s always best to point R at some other directory. If you don’t use RStudio, you need to manually set the working directory to where you want it with &lt;code&gt;setwd()&lt;/code&gt;, and many R scripts in the wild include something like &lt;code&gt;setwd(&#34;C:\\Users\\bill\\Desktop\\Important research project&#34;)&lt;/code&gt; at the beginning to change the directory. &lt;strong&gt;THIS IS BAD THOUGH&lt;/strong&gt; (&lt;a href=&#34;https://www.tidyverse.org/blog/2017/12/workflow-vs-script/&#34;&gt;see here for an explanation&lt;/a&gt;). If you ever move that directory somewhere else, or run the script on a different computer, or share the project with someone, the path will be wrong and nothing will run and you will be sad.&lt;/p&gt;
&lt;p&gt;The best way to deal with working directories with RStudio is to use RStudio Projects. These are special files that RStudio creates for you that end in a &lt;code&gt;.Rproj&lt;/code&gt; extension. When you open one of these special files, a new RStudio instance will open up and be pointed at the correct directory automatically. If you move the folder later or open it on a different computer, it will work just fine and you will not be sad.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://r4ds.had.co.nz/workflow-projects.html&#34;&gt;Read this super short chapter on RStudio projects.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-4-getting-familiar-with-r-markdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part 4: Getting familiar with R Markdown&lt;/h2&gt;
&lt;p&gt;To ensure that the analysis and graphics you make are reproducible, you’ll do the majority of your work in this class using &lt;strong&gt;R Markdown&lt;/strong&gt; files.&lt;/p&gt;
&lt;p&gt;Do the following things:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Watch this video:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://player.vimeo.com/video/178485416?color=428bca&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; fullscreen&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Skim through the content at these pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/resource/markdown/&#34;&gt;Using Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/resource/rmarkdown/&#34;&gt;Using R Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rmarkdown.rstudio.com/lesson-2.html&#34;&gt;How it Works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rmarkdown.rstudio.com/lesson-3.html&#34;&gt;Code Chunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rmarkdown.rstudio.com/lesson-4.html&#34;&gt;Inline Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rmarkdown.rstudio.com/lesson-8.html&#34;&gt;Markdown Basics&lt;/a&gt; (The &lt;a href=&#34;https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf&#34;&gt;R Markdown Reference Guide&lt;/a&gt; is super useful here.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rmarkdown.rstudio.com/lesson-9.html&#34;&gt;Output Formats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Watch this video:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
&lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/fT5xI1cmE2c&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Installing R, RStudio, tidyverse, and tinytex</title>
      <link>https://uvaDS8104.github.io/resource/install/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/resource/install/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#rstudio.cloud&#34;&gt;RStudio.cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rstudio-on-your-computer&#34;&gt;RStudio on your computer&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#install-r&#34;&gt;Install R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-rstudio&#34;&gt;Install RStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-tidyverse&#34;&gt;Install &lt;code&gt;tidyverse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-tinytex&#34;&gt;Install &lt;code&gt;tinytex&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;You will do all of your work in this class with the open source (and free!) programming language &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;R&lt;/a&gt;. You will use &lt;a href=&#34;https://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt; as the main program to access R. Think of R as an engine and RStudio as a car dashboard—R handles all the calculations and the actual statistics, while RStudio provides a nice interface for running R code.&lt;/p&gt;
&lt;div id=&#34;rstudio.cloud&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;RStudio.cloud&lt;/h2&gt;
&lt;p&gt;R is free, but it can sometimes be a pain to install and configure. To make life easier, you can (and should!) use the free &lt;a href=&#34;http://rstudio.cloud/&#34;&gt;RStudio.cloud&lt;/a&gt; service &lt;em&gt;initially&lt;/em&gt;, which lets you run a full instance of RStudio in your web browser. This means you won’t have to install anything on your computer to get started with R! We will have a shared class workspace in RStudio.cloud that will let you quickly copy templates for labs and problem sets.&lt;/p&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://rstudio.cloud/&#34; class=&#34;uri&#34;&gt;https://rstudio.cloud/&lt;/a&gt; and create an account. You’ll receive a link to join the shared class workspace separately. If you don’t get this link, let me know and I will invite you.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rstudio-on-your-computer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;RStudio on your computer&lt;/h2&gt;
&lt;p&gt;RStudio.cloud is convenient, but it can be slow and it is not designed to be able to handle larger datasets, more complicated analysis, or fancier graphics. Over the course of the semester, you should wean yourself off of RStudio.cloud and install all these things locally. This is also important if you want to customize fonts, since RStudio.cloud has extremely limited support for fonts other than Helvetica.&lt;/p&gt;
&lt;p&gt;Here’s how you install all these things&lt;/p&gt;
&lt;div id=&#34;install-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install R&lt;/h3&gt;
&lt;p&gt;First you need to install R itself (the engine).&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Go to the CRAN (Collective R Archive Network)&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; website: &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on “Download R for &lt;code&gt;XXX&lt;/code&gt;”, where &lt;code&gt;XXX&lt;/code&gt; is either Mac or Windows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/install/install-r-links.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you use macOS, scroll down to the first &lt;code&gt;.pkg&lt;/code&gt; file in the list of files (in this picture, it’s &lt;code&gt;R-4.0.0.pkg&lt;/code&gt;; as of right now, the current version is also 4.0.0) and download it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/install/install-r-mac.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use Windows, click “base” (or click on the bolded “install R for the first time” link) and download it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/install/install-r-windows.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Double click on the downloaded file (check your &lt;code&gt;Downloads&lt;/code&gt; folder). Click yes through all the prompts to install like any other program.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use macOS, &lt;a href=&#34;https://www.xquartz.org/&#34;&gt;download and install XQuartz&lt;/a&gt;. You do not need to do this on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;install-rstudio&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install RStudio&lt;/h3&gt;
&lt;p&gt;Next, you need to install RStudio, the nicer graphical user interface (GUI) for R (the dashboard). Once R and RStudio are both installed, you can ignore R and only use RStudio. RStudio will use R automatically and you won’t ever have to interact with it directly.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Go to the free download location on RStudio’s website: &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/#download&#34; class=&#34;uri&#34;&gt;https://www.rstudio.com/products/rstudio/download/#download&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The website should automatically detect your operating system (macOS or Windows) and show a big download button for it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/install/install-r-rstudio1.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If not, scroll down a little to the large table and choose the version of RStudio that matches your operating system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/install/install-r-rstudio2.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Double click on the downloaded file (again, check your &lt;code&gt;Downloads&lt;/code&gt; folder). Click yes through all the prompts to install like any other program.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Double click on RStudio to run it (check your applications folder or start menu).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;install-tidyverse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install &lt;code&gt;tidyverse&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;R packages are easy to install with RStudio. Select the packages panel, click on “Install,” type the name of the package you want to install, and press enter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/install/install-r-package-panel.png&#34; width=&#34;40%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This can sometimes be tedious when you’re installing lots of packages, though. &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;The tidyverse&lt;/a&gt;, for instance, consists of dozens of packages (including &lt;strong&gt;ggplot2&lt;/strong&gt;) that all work together. Rather than install each individually, you can install a single magical package and get them all at the same time.&lt;/p&gt;
&lt;p&gt;Go to the packages panel in RStudio, click on “Install,” type “tidyverse”, and press enter. You’ll see a bunch of output in the RStudio console as all the tidyverse packages are installed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/install/install-r-tidyverse.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice also that RStudio will generate a line of code for you and run it: &lt;code&gt;install.packages(&#34;tidyverse&#34;)&lt;/code&gt;. You can also just paste and run this instead of using the packages panel.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;install-tinytex&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install &lt;code&gt;tinytex&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When you knit to PDF, R uses a special scientific typesetting program named LaTeX (pronounced “lay-tek” or “lah-tex”; for goofy nerdy reasons, the x is technically the “ch” sound in “Bach”, but most people just say it as “k”—saying “layteks” is frowned on for whatever reason).&lt;/p&gt;
&lt;p&gt;LaTeX is neat and makes pretty documents, but it’s a huge program—&lt;a href=&#34;https://tug.org/mactex/mactex-download.html&#34;&gt;the macOS version, for instance, is nearly 4 GB&lt;/a&gt;! To make life easier, there’s &lt;a href=&#34;https://yihui.org/tinytex/&#34;&gt;an R package named &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt; that installs a minimal LaTeX program and that automatically deals with differences between macOS and Windows.&lt;/p&gt;
&lt;p&gt;Here’s how to install &lt;strong&gt;tinytex&lt;/strong&gt; so you can knit to pretty PDFs:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Use the Packages in panel in RStudio to install &lt;strong&gt;tinytex&lt;/strong&gt; like you did above with &lt;strong&gt;tidyverse&lt;/strong&gt;. Alternatively, run &lt;code&gt;install.packages(&#34;tinytex&#34;)&lt;/code&gt; in the console.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;tinytex::install_tinytex()&lt;/code&gt; in the console.&lt;/li&gt;
&lt;li&gt;Wait for a bit while R downloads and installs everything you need.&lt;/li&gt;
&lt;li&gt;The end! You should now be able to knit to PDF.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;It’s a goofy name, but CRAN is where most R packages—and R itself—lives.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Design</title>
      <link>https://uvaDS8104.github.io/resource/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/resource/design/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#accessibility&#34;&gt;Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#colors&#34;&gt;Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fonts&#34;&gt;Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#graphic-assets&#34;&gt;Graphic assets&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vectors&#34;&gt;Vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vectors-photos-videos-and-other-assets&#34;&gt;Vectors, photos, videos, and other assets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;accessibility&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Accessibility&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vischeck.com/vischeck/vischeckImage.php&#34;&gt;&lt;strong&gt;Vischeck&lt;/strong&gt;&lt;/a&gt;: Simulate how your images look for people with different forms of colorblindness (web-based)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://colororacle.org/index.html&#34;&gt;&lt;strong&gt;Color Oracle&lt;/strong&gt;&lt;/a&gt;: Simulate how your images look for people with different forms of colorblindness (desktop-based, more types of colorblindness)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;colors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Colors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://color.adobe.com&#34;&gt;&lt;strong&gt;Adobe Color&lt;/strong&gt;&lt;/a&gt;: Create, share, and explore rule-based and custom color palettes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.colourlovers.com/&#34;&gt;&lt;strong&gt;ColourLovers&lt;/strong&gt;&lt;/a&gt;: Like Facebook for color palettes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html&#34;&gt;&lt;strong&gt;viridis&lt;/strong&gt;&lt;/a&gt;: Percetually uniform color scales.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fabiocrameri.ch/colourmaps.php&#34;&gt;&lt;strong&gt;Scientific Colour-Maps&lt;/strong&gt;&lt;/a&gt;: Perceptually uniform color scales like viridis. Use them in R with &lt;a href=&#34;https://github.com/thomasp85/scico&#34;&gt;&lt;strong&gt;scico&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://colorbrewer2.org/&#34;&gt;&lt;strong&gt;ColorBrewer&lt;/strong&gt;&lt;/a&gt;: Sequential, diverging, and qualitative color palettes that take accessibility into account.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vrl.cs.brown.edu/color&#34;&gt;&lt;strong&gt;Colorgorical&lt;/strong&gt;&lt;/a&gt;: Create color palettes based on fancy mathematical rules for perceptual distance.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tristen.ca/hcl-picker/&#34;&gt;&lt;strong&gt;Colorpicker for data&lt;/strong&gt;&lt;/a&gt;: More fancy mathematical rules for color palettes (&lt;a href=&#34;https://www.vis4.net/blog/posts/avoid-equidistant-hsv-colors/&#34;&gt;explanation&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.medialab.sciences-po.fr/iwanthue/&#34;&gt;&lt;strong&gt;iWantHue&lt;/strong&gt;&lt;/a&gt;: Yet another perceptual distance-based color palette builder.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://photochrome.io/&#34;&gt;&lt;strong&gt;Photochrome&lt;/strong&gt;&lt;/a&gt;: Word-based color pallettes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://policyviz.com/better-presentations/design-resources/design-color-tools/&#34;&gt;&lt;strong&gt;PolicyViz Design Color Tools&lt;/strong&gt;&lt;/a&gt;: Large collection of useful color resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;fonts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fonts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fonts.google.com/&#34;&gt;&lt;strong&gt;Google Fonts&lt;/strong&gt;&lt;/a&gt;: Huge collection of free, well-made fonts.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reliablepsd.com/ultimate-google-font-pairings/&#34;&gt;&lt;strong&gt;The Ultimate Collection of Google Font Pairings&lt;/strong&gt;&lt;/a&gt;: A list of great, well-designed font pairings from all those fonts hosted by Google (for when you’re looking for good contrasting or complementary fonts).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;graphic-assets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Graphic assets&lt;/h2&gt;
&lt;div id=&#34;images&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Images&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use the Creative Commons filters on Google Images or Flickr&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unsplash.com/&#34;&gt;&lt;strong&gt;Unsplash&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pexels.com/&#34;&gt;&lt;strong&gt;Pexels&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pixabay.com/&#34;&gt;&lt;strong&gt;Pixabay&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stocksnap.io/&#34;&gt;&lt;strong&gt;StockSnap.io&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://burst.shopify.com/&#34;&gt;&lt;strong&gt;Burst&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://freephotos.cc/&#34;&gt;&lt;strong&gt;freephotos.cc&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;vectors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Vectors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thenounproject.com/&#34;&gt;&lt;strong&gt;Noun Project&lt;/strong&gt;&lt;/a&gt;: Thousands of free simple vector images&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://aiconica.net/&#34;&gt;&lt;strong&gt;aiconica&lt;/strong&gt;&lt;/a&gt;: 1,000+ vector icons&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vecteezy.com/&#34;&gt;&lt;strong&gt;Vecteezy&lt;/strong&gt;&lt;/a&gt;: Thousands of free vector images&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;vectors-photos-videos-and-other-assets&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Vectors, photos, videos, and other assets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stockio.com/&#34;&gt;&lt;strong&gt;Stockio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Graphic design</title>
      <link>https://uvaDS8104.github.io/lesson/02-lesson/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/02-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#file-types&#34;&gt;File types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#select-the-best-file-type&#34;&gt;Select the best file type&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;file-types&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;File types&lt;/h2&gt;
&lt;p&gt;Recall from the &lt;a href=&#34;https://uvaDS8104.github.io/slides/02-slides.html#image-types&#34;&gt;last section of the lecture&lt;/a&gt; that you’ll typically work with one of two image file types: bitmap images and vector images.&lt;/p&gt;
&lt;p&gt;Bitmaps store image information as tiny squares, or pixels. Specific files types compress these images in different ways: JPEG files smudge together groups of similarly colored pixels to save repetition, while PNG and GIF files look for fields of the exact same color.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/slides/img/02/example-bitmap.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You use bitmap images for things that go on the internet and when you place images in Word (technically modern versions of Word can handle some types of vector images, but that support isn’t universal yet).&lt;/p&gt;
&lt;p&gt;Vector images, on the other hand, do not store image information as pixels. Instead, these use mathematical formulas to draw lines and curves and fill areas with specific colors. This makes them a little more complicated to draw and create, but it also means that you can scale them up or down infinitely—a vector image will look just as crisp on a postage stamp as it would on a billboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/slides/img/02/example-vector.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here are some general guidelines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If an image has lots of colors (like a photograph), you should use a bitmap file type designed for lots of colors, like JPEG. This is the case regardless of where the image will ultimately end up. If you’re putting it on the internet, it needs to be a JPEG. If you’re blowing it up to fit on a billboard, it will still need to be a JPEG (and you have to use a fancy super high quality camera to get a high enough resolution for that kind of expansion)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If an image has a few colors and some text and is not a photograph &lt;em&gt;and&lt;/em&gt; you’re using the image in Word or on the internet, you should use a bitmap file type designed for carefully compressing a few colors, like PNG.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If an image has a few colors and some text and is not a photograph &lt;em&gt;and&lt;/em&gt; you’re planning on using it in multiple sizes (like a logo), or using it in fancier production software like Adobe InDesign (for print) or Adobe After Effects (for video), you should use a vector file type like PDF or SVG.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;select-the-best-file-type&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Select the best file type&lt;/h2&gt;
&lt;p&gt;Practice deciding what kind of file type you should use by looking at these images and choosing what you think works the best.&lt;/p&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/lesson/file-types/atlanta-sign.jpg&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;form name=&#34;form_1&#34; onsubmit=&#34;return validate_form_1()&#34; method=&#34;post&#34;&gt;
&lt;input type=&#34;radio&#34; name=&#34;answer_1&#34; id=&#34;1_1&#34; value=&#34;PNG&#34;&gt;&lt;label for=&#34;1&#34;&gt;PNG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_1&#34; id=&#34;1_2&#34; value=&#34;JPG&#34;&gt;&lt;label for=&#34;2&#34;&gt;JPG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_1&#34; id=&#34;1_3&#34; value=&#34;PDF&#34;&gt;&lt;label for=&#34;3&#34;&gt;PDF&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;submit&#34; value=&#34;Check answer&#34;&gt;
&lt;/form&gt;
&lt;p id=&#34;result_1&#34;&gt;
&lt;/p&gt;
&lt;script&gt; function validate_form_1() {var x, text; var x = document.forms[&#34;form_1&#34;][&#34;answer_1&#34;].value;if (x == &#34;JPG&#34;){text = &#39;Correct! This is a photograph, so it should be a JPG. It might seem a little tricky since there are so few colors, but it still needs to be a JPG because the black paint on the brick is actually a range of thousands of different shades of black pixels.&#39;;} else {text = &#39;Not quite—this image has a lot of colors in it…&#39;;} document.getElementById(&#39;result_1&#39;).innerHTML = text; return false;} &lt;/script&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/lesson/file-types/gsu-logo.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;form name=&#34;form_2&#34; onsubmit=&#34;return validate_form_2()&#34; method=&#34;post&#34;&gt;
&lt;input type=&#34;radio&#34; name=&#34;answer_2&#34; id=&#34;2_1&#34; value=&#34;PNG&#34;&gt;&lt;label for=&#34;1&#34;&gt;PNG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_2&#34; id=&#34;2_2&#34; value=&#34;JPG&#34;&gt;&lt;label for=&#34;2&#34;&gt;JPG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_2&#34; id=&#34;2_3&#34; value=&#34;PDF&#34;&gt;&lt;label for=&#34;3&#34;&gt;PDF&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;submit&#34; value=&#34;Check answer&#34;&gt;
&lt;/form&gt;
&lt;p id=&#34;result_2&#34;&gt;
&lt;/p&gt;
&lt;script&gt; function validate_form_2() {var x, text; var x = document.forms[&#34;form_2&#34;][&#34;answer_2&#34;].value;if (x == &#34;PNG&#34;|x == &#34;PDF&#34;){text = &#39;Correct! This is a logo with a few colors in it, so it’s vector-based. If you use a PDF of the logo, you can rescale it infinitely big or small. If you use a PNG, it will work nicely online.&#39;;} else {text = &#39;Not quite—this image doesn’t have a lot of colors in it…&#39;;} document.getElementById(&#39;result_2&#39;).innerHTML = text; return false;} &lt;/script&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/lesson/file-types/pie_chart.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;form name=&#34;form_3&#34; onsubmit=&#34;return validate_form_3()&#34; method=&#34;post&#34;&gt;
&lt;input type=&#34;radio&#34; name=&#34;answer_3&#34; id=&#34;3_1&#34; value=&#34;PNG&#34;&gt;&lt;label for=&#34;1&#34;&gt;PNG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_3&#34; id=&#34;3_2&#34; value=&#34;JPG&#34;&gt;&lt;label for=&#34;2&#34;&gt;JPG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_3&#34; id=&#34;3_3&#34; value=&#34;PDF&#34;&gt;&lt;label for=&#34;3&#34;&gt;PDF&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;submit&#34; value=&#34;Check answer&#34;&gt;
&lt;/form&gt;
&lt;p id=&#34;result_3&#34;&gt;
&lt;/p&gt;
&lt;script&gt; function validate_form_3() {var x, text; var x = document.forms[&#34;form_3&#34;][&#34;answer_3&#34;].value;if (x == &#34;PNG&#34;|x == &#34;PDF&#34;){text = &#39;Correct! This is a grpah with a few colors in it, so should be vector-based. If you’re using this in a fancy publication or report, use a PDF. If you’e using Word or HTML, use a PNG.&#39;;} else {text = &#39;Not quite—this image doesn’t have a lot of colors in it…&#39;;} document.getElementById(&#39;result_3&#39;).innerHTML = text; return false;} &lt;/script&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/lesson/file-types/solo.jpg&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;form name=&#34;form_4&#34; onsubmit=&#34;return validate_form_4()&#34; method=&#34;post&#34;&gt;
&lt;input type=&#34;radio&#34; name=&#34;answer_4&#34; id=&#34;4_1&#34; value=&#34;PNG&#34;&gt;&lt;label for=&#34;1&#34;&gt;PNG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_4&#34; id=&#34;4_2&#34; value=&#34;JPG&#34;&gt;&lt;label for=&#34;2&#34;&gt;JPG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_4&#34; id=&#34;4_3&#34; value=&#34;PDF&#34;&gt;&lt;label for=&#34;3&#34;&gt;PDF&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;submit&#34; value=&#34;Check answer&#34;&gt;
&lt;/form&gt;
&lt;p id=&#34;result_4&#34;&gt;
&lt;/p&gt;
&lt;script&gt; function validate_form_4() {var x, text; var x = document.forms[&#34;form_4&#34;][&#34;answer_4&#34;].value;if (x == &#34;JPG&#34;){text = &#39;Correct! This has a ton of colors in it and is mostly a photograph. You may have been thrown off by the text in the bottom section, or the stylized shapes of the Millennium Falcon’s windows at the top. Those shapes and the text are both vector-based, but because the majority of the image is a photogrpah, it still needs to be saved as a JPG. To keep the text nice and crisp, it needs to be exported at a high resolution.&#39;;} else {text = &#39;Not quite—this image has a lot of colors in it…&#39;;} document.getElementById(&#39;result_4&#39;).innerHTML = text; return false;} &lt;/script&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/lesson/file-types/butterflies.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;form name=&#34;form_5&#34; onsubmit=&#34;return validate_form_5()&#34; method=&#34;post&#34;&gt;
&lt;input type=&#34;radio&#34; name=&#34;answer_5&#34; id=&#34;5_1&#34; value=&#34;PNG&#34;&gt;&lt;label for=&#34;1&#34;&gt;PNG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_5&#34; id=&#34;5_2&#34; value=&#34;JPG&#34;&gt;&lt;label for=&#34;2&#34;&gt;JPG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_5&#34; id=&#34;5_3&#34; value=&#34;PDF&#34;&gt;&lt;label for=&#34;3&#34;&gt;PDF&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;submit&#34; value=&#34;Check answer&#34;&gt;
&lt;/form&gt;
&lt;p id=&#34;result_5&#34;&gt;
&lt;/p&gt;
&lt;script&gt; function validate_form_5() {var x, text; var x = document.forms[&#34;form_5&#34;][&#34;answer_5&#34;].value;if (x == &#34;PNG&#34;|x == &#34;PDF&#34;){text = &#39;Correct! Even though this is very colorful, it should be a PNG or PDF, since it’s vector-based and not a photograph. &#39;;} else {text = &#39;Not quite—this image doesn’t have a lot of colors in it…&#39;;} document.getElementById(&#39;result_5&#39;).innerHTML = text; return false;} &lt;/script&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/lesson/file-types/atlanta-night.jpg&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;form name=&#34;form_6&#34; onsubmit=&#34;return validate_form_6()&#34; method=&#34;post&#34;&gt;
&lt;input type=&#34;radio&#34; name=&#34;answer_6&#34; id=&#34;6_1&#34; value=&#34;PNG&#34;&gt;&lt;label for=&#34;1&#34;&gt;PNG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_6&#34; id=&#34;6_2&#34; value=&#34;JPG&#34;&gt;&lt;label for=&#34;2&#34;&gt;JPG&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;radio&#34; name=&#34;answer_6&#34; id=&#34;6_3&#34; value=&#34;PDF&#34;&gt;&lt;label for=&#34;3&#34;&gt;PDF&lt;/label&gt;&lt;br&gt;&lt;input type=&#34;submit&#34; value=&#34;Check answer&#34;&gt;
&lt;/form&gt;
&lt;p id=&#34;result_6&#34;&gt;
&lt;/p&gt;
&lt;script&gt; function validate_form_6() {var x, text; var x = document.forms[&#34;form_6&#34;][&#34;answer_6&#34;].value;if (x == &#34;JPG&#34;){text = &#39;Correct! This is a photograph and should be a JPG.&#39;;} else {text = &#39;Not quite—this image has a lot of colors in it…&#39;;} document.getElementById(&#39;result_6&#39;).innerHTML = text; return false;} &lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Markdown</title>
      <link>https://uvaDS8104.github.io/resource/markdown/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/resource/markdown/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-markdown-formatting&#34;&gt;Basic Markdown formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tables&#34;&gt;Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#footnotes&#34;&gt;Footnotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#front-matter&#34;&gt;Front matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#citations&#34;&gt;Citations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-references&#34;&gt;Other references&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; is a special kind of markup language that lets you format text with simple syntax. You can then use a converter program like &lt;a href=&#34;https://pandoc.org/&#34;&gt;pandoc&lt;/a&gt; to convert Markdown into whatever format you want: HTML, PDF, Word, PowerPoint, etc. (&lt;a href=&#34;https://pandoc.org/MANUAL.html#option--to&#34;&gt;see the full list of output types here&lt;/a&gt;)&lt;/p&gt;
&lt;div id=&#34;basic-markdown-formatting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Markdown formatting&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;40%&#34; /&gt;
&lt;col width=&#34;21%&#34; /&gt;
&lt;col width=&#34;38%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Type…&lt;/th&gt;
&lt;th&gt;…or…&lt;/th&gt;
&lt;th&gt;…to get&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;pre&gt;Some text in a paragraph.

More text in the next paragraph. Always
use empty lines between paragraphs.&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Some text in a paragraph.&lt;/p&gt;
&lt;p&gt;More text in the next paragraph. Always
use empty lines between paragraphs.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;*Italic*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_Italic_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Italic&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;**Bold**&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__Bold__&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Bold&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;# Heading 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;h1 class=&#34;smaller-h1&#34;&gt;
Heading 1
&lt;/h1&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;## Heading 2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;h2 class=&#34;smaller-h2&#34;&gt;
Heading 2
&lt;/h2&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;### Heading 3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;h3 class=&#34;smaller-h3&#34;&gt;
Heading 3
&lt;/h3&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;(Go up to heading level 6 with &lt;code&gt;######&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;[Link text](http://www.example.com)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.example.com&#34;&gt;Link text&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;![Image caption](/path/to/image.png)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/mstile-144x144.png&#34; title=&#34;fig:&#34; alt=&#34;Class logo&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;`&lt;code&gt;Inline code` with backticks&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Inline code&lt;/code&gt; with backticks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;&amp;gt; Blockquote&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;blockquote&gt;
&lt;p&gt;Blockquote&lt;/p&gt;
&lt;/blockquote&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;pre&gt;- Things in
- an unordered
- list&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;pre&gt;* Things in
* an unordered
* list&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Things in&lt;/li&gt;
&lt;li&gt;an unordered&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;pre&gt;1. Things in
2. an ordered
3. list&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;pre&gt;1) Things in
2) an ordered
3) list&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Things in&lt;/li&gt;
&lt;li&gt;an ordered&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;/ol&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;pre&gt;Horizontal line

---&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;pre&gt;Horizontal line

***&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Horizontal line&lt;/p&gt;
&lt;hr /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;math&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Math&lt;/h2&gt;
&lt;p&gt;Markdown uses LaTeX to create fancy mathematical equations. There are like a billion little options and features available for math equations—you can find &lt;a href=&#34;http://www.malinc.se/math/latex/basiccodeen.php&#34;&gt;helpful examples of the the most common basic commands here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can use math in two different ways: inline or in a display block. To use math inline, wrap it in single dollar signs, like &lt;code&gt;$y = mx + b$&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;52%&#34; /&gt;
&lt;col width=&#34;47%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Type…&lt;/th&gt;
&lt;th&gt;…to get&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;pre&gt;Based on the DAG, the regression model for
estimating the effect of education on wages
is $\hat{y} = \beta_0 + \beta_1 x_1 + \epsilon$, or
$\text{Wages} = \beta_0 + \beta_1 \text{Education} + \epsilon$.&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt;Based on the DAG, the regression model for
estimating the effect of education on wages
is &lt;span class=&#34;math inline&#34;&gt;\(\hat{y} = \beta_0 + \beta_1 x_1 + \epsilon\)&lt;/span&gt;, or
&lt;span class=&#34;math inline&#34;&gt;\(\text{Wages} = \beta_0 + \beta_1 \text{Education} + \epsilon\)&lt;/span&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To put an equation on its own line in a display block, wrap it in double dollar signs, like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Type…&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;The quadratic equation was an important part of high school math:

$$
x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
$$

But now we just use computers to solve for $x$.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;…to get…&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The quadratic equation was an important part of high school math:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;But now we just use computers to solve for &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;Because dollar signs are used to indicate math equations, you can’t just use dollar signs like normal if you’re writing about actual dollars. For instance, if you write &lt;code&gt;This book costs $5.75 and this other costs $40&lt;/code&gt;, Markdown will treat everything that comes between the dollar signs as math, like so: “This book costs $5.75 and this other costs $40”.&lt;/p&gt;
&lt;p&gt;To get around that, put a backslash (&lt;code&gt;\&lt;/code&gt;) in front of the dollar signs, so that &lt;code&gt;This book costs \$5.75 and this other costs \$40&lt;/code&gt; becomes “This book costs &lt;span&gt;$5.75&lt;/span&gt; and this other costs &lt;span&gt;$40&lt;/span&gt;”.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tables&lt;/h2&gt;
&lt;p&gt;There are 4 different ways to hand-create tables in Markdown—I say “hand-create” because it’s normally way easier to use R to generate these things with packages like &lt;a href=&#34;https://rapporter.github.io/pander/&#34;&gt;&lt;strong&gt;pander&lt;/strong&gt;&lt;/a&gt; (use &lt;code&gt;pandoc.table()&lt;/code&gt;) or &lt;strong&gt;knitr&lt;/strong&gt; (use &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/kable.html&#34;&gt;&lt;code&gt;kable()&lt;/code&gt;&lt;/a&gt;). The two most common are simple tables and pipe tables. &lt;a href=&#34;https://pandoc.org/MANUAL.html#tables&#34;&gt;You should look at the full documentation here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For simple tables, type…&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;  Right     Left     Center     Default
-------     ------ ----------   -------
     12     12        12            12
    123     123       123          123
      1     1          1             1

Table: Caption goes here&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;…to get…&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;Caption goes here&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;Right&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Left&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Center&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;123&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;For pipe tables, type…&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |

Table: Caption goes here&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;…to get…&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;Caption goes here&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;Right&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Left&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Center&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;123&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;footnotes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;There are two different ways to add footnotes (&lt;a href=&#34;https://pandoc.org/MANUAL.html#footnotes&#34;&gt;see here for complete documentation&lt;/a&gt;): regular and inline.&lt;/p&gt;
&lt;p&gt;Regular notes need (1) an identifier and (2) the actual note. The identifier can be whatever you want. Some people like to use numbers like &lt;code&gt;[^1]&lt;/code&gt;, but if you ever rearrange paragraphs or add notes before #1, the numbering will be wrong (in your Markdown file, not in the output; everything will be correct in the output). Because of that, I prefer to use some sort of text label:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Type…&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;Here is a footnote reference[^1] and here is another [^note-on-dags].

[^1]: This is a note.

[^note-on-dags]: DAGs are neat. 

And here&amp;#39;s more of the document.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;…to get…&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here is a footnote reference&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and here is another.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And here’s more of the document.&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;
&lt;p&gt;
This is a note.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;
&lt;p&gt;
DAGs are neat.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;You can also use inline footnotes with &lt;code&gt;^[Text of the note goes here]&lt;/code&gt;, which are often easier because you don’t need to worry about identifiers:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Type…&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;Causal inference is neat.^[But it can be hard too!]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;…to get…&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Causal inference is neat.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;ol&gt;
&lt;li id=&#34;fn3&#34;&gt;
&lt;p&gt;
But it can be hard too!&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;front-matter&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Front matter&lt;/h2&gt;
&lt;p&gt;You can include a special section at the top of a Markdown document that contains metadata (or data about your document) like the title, date, author, etc. This section uses a special simple syntax named &lt;a href=&#34;https://learn.getgrav.org/16/advanced/yaml&#34;&gt;YAML&lt;/a&gt; (or “YAML Ain’t Markup Language”) that follows this basic outline: &lt;code&gt;setting: value for setting&lt;/code&gt;. Here’s an example YAML metadata section. Note that it must start and end with three dashes (&lt;code&gt;---&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: Title of your document
date: &amp;quot;January 13, 2020&amp;quot;
author: &amp;quot;Your name&amp;quot;
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can put the values inside quotes (like the date and name in the example above), or you can leave them outside of quotes (like the title in the example above). I typically use quotes just to be safe—if the value you’re using has a colon (&lt;code&gt;:&lt;/code&gt;) in it, it’ll confuse Markdown since it’ll be something like &lt;code&gt;title: My cool title: a subtitle&lt;/code&gt;, which has two colons. It’s better to do this:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: &amp;quot;My cool title: a subtitle&amp;quot;
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to use quotes inside one of the values (e.g. your document is &lt;code&gt;An evaluation of &#34;scare quotes&#34;&lt;/code&gt;), you can use single quotes instead:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: &amp;#39;An evaluation of &amp;quot;scare quotes&amp;quot;&amp;#39;
---&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;citations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Citations&lt;/h2&gt;
&lt;p&gt;One of the most powerful features of Markdown + pandoc is the ability to automatically cite things and generate bibliographies. to use citations, you need to create a &lt;a href=&#34;http://www.bibtex.org/&#34;&gt;BibTeX file&lt;/a&gt; (ends in &lt;code&gt;.bib&lt;/code&gt;) that contains a database of the things you want to cite. You can do this with bibliography managers designed to work with BibTeX directly (like &lt;a href=&#34;https://bibdesk.sourceforge.io/&#34;&gt;BibDesk&lt;/a&gt; on macOS), or you can use &lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; (macOS and Windows) to export a &lt;code&gt;.bib&lt;/code&gt; file. You can &lt;a href=&#34;https://uvaDS8104.github.io/reference/&#34;&gt;download an example &lt;code&gt;.bib&lt;/code&gt; file of all the readings from this class here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html&#34;&gt;Complete details for using citations can be found here&lt;/a&gt;. In brief, you need to do three things:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Add a &lt;code&gt;bibliography:&lt;/code&gt; entry to the YAML metadata:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: Title of your document
date: &amp;quot;January 13, 2020&amp;quot;
author: &amp;quot;Your name&amp;quot;
bibliography: name_of_file.bib
---&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose a citation style based on a CSL file. The default is Chicago author-date, but you can choose from 2,000+ &lt;a href=&#34;https://github.com/citation-style-language/styles&#34;&gt;at this repository&lt;/a&gt;. Download the CSL file, put it in your project folder, and add an entry to the YAML metadata (or provide a URL to the online version):&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: Title of your document
date: &amp;quot;January 13, 2020&amp;quot;
author: &amp;quot;Your name&amp;quot;
bibliography: name_of_file.bib
csl: &amp;quot;https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl&amp;quot;
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of the most common CSLs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-author-date.csl&#34;&gt;Chicago author-date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-note-bibliography.csl&#34;&gt;Chicago note-bibliography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-fullnote-bibliography.csl&#34;&gt;Chicago full note-bibliography&lt;/a&gt; (no shortened notes or ibids)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl&#34;&gt;APA 7th edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/citation-style-language/styles/master/modern-language-association.csl&#34;&gt;MLA 8th edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cite things in your document. &lt;a href=&#34;https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html&#34;&gt;Check the documentation for full details of how to do this&lt;/a&gt;. Essentially, you use &lt;code&gt;@citationkey&lt;/code&gt; inside square brackets (&lt;code&gt;[]&lt;/code&gt;):&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;51%&#34; /&gt;
&lt;col width=&#34;48%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Type…&lt;/th&gt;
&lt;th&gt;…to get…&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Causal inference is neat [@Rohrer:2018; @AngristPischke:2015].&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Causal inference is neat (Rohrer 2018; Angrist and Pischke 2015).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;Causal inference is neat [see @Rohrer:2018, p. 34; also @AngristPischke:2015, chapter 1].&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Causal inference is neat (see Rohrer 2018, 34; also Angrist and Pischke 2015, chap. 1).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;Angrist and Pischke say causal inference is neat [-@AngristPischke:2015; see also @Rohrer:2018].&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Angrist and Pischke say causal inference is neat (2015; see also Rohrer 2018).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;@AngristPischke:2015 [chapter 1] say causal inference is neat, and @Rohrer:2018 agrees.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Angrist and Pischke (2015, chap. 1) say causal inference is neat, and Rohrer (2018) agrees.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;After compiling, you should have a perfectly formatted bibliography added to the end of your document too:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Angrist, Joshua D., and Jörn-Steffen Pischke. 2015. &lt;em&gt;Mastering ’Metrics: The Path from Cause to Effect.&lt;/em&gt; Princeton, NJ: Princeton University Press.&lt;/p&gt;
&lt;p&gt;Rohrer, Julia M. 2018. “Thinking Clearly About Correlations and Causation: Graphical Causal Models for Observational Data.” &lt;em&gt;Advances in Methods and Practices in Psychological Science&lt;/em&gt; 1 (1): 27–42. &lt;a href=&#34;https://doi.org/10.1177/2515245917745629&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1177/2515245917745629&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;other-references&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other references&lt;/h2&gt;
&lt;p&gt;These websites have additional details and examples and practice tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://commonmark.org/help/tutorial/&#34;&gt;&lt;strong&gt;CommonMark’s Markdown tutorial&lt;/strong&gt;&lt;/a&gt;: A quick interactive Markdown tutorial.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.markdowntutorial.com/&#34;&gt;&lt;strong&gt;Markdown tutorial&lt;/strong&gt;&lt;/a&gt;: Another interactive tutorial to practice using Markdown.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://packetlife.net/media/library/16/Markdown.pdf&#34;&gt;&lt;strong&gt;Markdown cheatsheet&lt;/strong&gt;&lt;/a&gt;: Useful one-page reminder of Markdown syntax.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plain-text.co/&#34;&gt;&lt;strong&gt;The Plain Person’s Guide to Plain Text Social Science&lt;/strong&gt;&lt;/a&gt;: A comprehensive explanation and tutorial about why you should write data-based reports in Markdown.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualization</title>
      <link>https://uvaDS8104.github.io/resource/visualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/resource/visualization/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#interesting-and-excellent-real-world-examples&#34;&gt;Interesting and excellent real world examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-select-the-appropriate-chart-type&#34;&gt;How to select the appropriate chart type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#general-resources&#34;&gt;General resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visualization-in-excel&#34;&gt;Visualization in Excel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visualization-in-tableau&#34;&gt;Visualization in Tableau&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;interesting-and-excellent-real-world-examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Interesting and excellent real world examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.storiesbehindaline.com/&#34;&gt;The Stories Behind a Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flowingdata.com/2017/06/28/australia-as-100-people/&#34;&gt;Australia as 100 people&lt;/a&gt;: You can make something like this with &lt;a href=&#34;https://d3js.org/&#34;&gt;d3&lt;/a&gt; and the &lt;a href=&#34;https://github.com/civisanalytics/potato&#34;&gt;potato project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flowingdata.com/2017/07/17/marrying-age-over-the-past-century/&#34;&gt;Marrying Later, Staying Single Longer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-select-the-appropriate-chart-type&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How to select the appropriate chart type&lt;/h2&gt;
&lt;p&gt;Many people have created many useful tools for selecting the correct chart type for a given dataset or question. Here are some of the best:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datavizcatalogue.com/&#34;&gt;&lt;strong&gt;The Data Visualisation Catalogue&lt;/strong&gt;&lt;/a&gt;: Descriptions, explanations, examples, and tools for creating 60 different types of visualizations.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://datavizproject.com/&#34;&gt;&lt;strong&gt;The Data Viz Project&lt;/strong&gt;&lt;/a&gt;: Descriptions and examples for 150 different types of visualizations. Also allows you to search by data shape and chart function (comparison, correlation, distribution, geographical, part to whole, trend over time, etc.).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.data-to-viz.com/&#34;&gt;&lt;strong&gt;From Data to Viz&lt;/strong&gt;&lt;/a&gt;: A decision tree for dozens of chart types with links to R and Python code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chartmaker.visualisingdata.com/&#34;&gt;&lt;strong&gt;The Chartmaker Directory&lt;/strong&gt;&lt;/a&gt;: Examples of how to create 51 different types of visualizations in 31 different software packages, including Excel, Tableau, and R.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shinyapps.stat.ubc.ca/r-graph-catalog/&#34;&gt;&lt;strong&gt;R Graph Catalog&lt;/strong&gt;&lt;/a&gt;: R code for 124 ggplot graphs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://annkemery.com/essentials/&#34;&gt;&lt;strong&gt;Emery’s Essentials&lt;/strong&gt;&lt;/a&gt;: Descriptions and examples of 26 different chart types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;general-resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;General resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.storytellingwithdata.com/&#34;&gt;&lt;strong&gt;Storytelling with Data&lt;/strong&gt;&lt;/a&gt;: Blog and site full of resources by Cole Nussbaumer Knaflic.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://annkemery.com/blog/&#34;&gt;&lt;strong&gt;Ann K. Emery’s blog&lt;/strong&gt;&lt;/a&gt;: Blog and tutorials by &lt;a href=&#34;https://twitter.com/AnnKEmery&#34;&gt;Ann Emery&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stephanieevergreen.com/&#34;&gt;&lt;strong&gt;Evergreen Data&lt;/strong&gt;&lt;/a&gt;: Helful resources by &lt;a href=&#34;https://twitter.com/evergreendata&#34;&gt;Stephanie Evergreen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://policyviz.com/&#34;&gt;&lt;strong&gt;PolicyViz&lt;/strong&gt;&lt;/a&gt;: Regular podcast and site full of helpful resources by &lt;a href=&#34;https://twitter.com/jschwabish&#34;&gt;Jon Schwabisch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.visualisingdata.com/&#34;&gt;&lt;strong&gt;Visualising Data&lt;/strong&gt;&lt;/a&gt;: Fantastic collection of visualization resources, articles, and tutorials by &lt;a href=&#34;https://twitter.com/visualisingdata&#34;&gt;Andy Kirk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://infowetrust.com/&#34;&gt;&lt;strong&gt;Info We Trust&lt;/strong&gt;&lt;/a&gt;: Detailed explorations of visualizations by &lt;a href=&#34;https://twitter.com/infowetrust&#34;&gt;RJ Andrews&lt;/a&gt;, including a &lt;a href=&#34;http://infowetrust.com/history/&#34;&gt;beautiful visual history of the field&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flowingdata.com/&#34;&gt;&lt;strong&gt;FlowingData&lt;/strong&gt;&lt;/a&gt;: Blog by &lt;a href=&#34;https://twitter.com/flowingdata&#34;&gt;Nathan Yau&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.informationisbeautiful.net/&#34;&gt;&lt;strong&gt;Information is Beautiful&lt;/strong&gt;&lt;/a&gt;: Blog by &lt;a href=&#34;https://twitter.com/mccandelish&#34;&gt;David McCandless&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://junkcharts.typepad.com/&#34;&gt;&lt;strong&gt;Junk Charts&lt;/strong&gt;&lt;/a&gt;: Blog by &lt;a href=&#34;https://twitter.com/junkcharts&#34;&gt;Kaiser Fung&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://viz.wtf/&#34;&gt;&lt;strong&gt;WTF Visualizations&lt;/strong&gt;&lt;/a&gt;: Visualizations that make you ask “wtf?”&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://annkemery.com/checklist/&#34;&gt;&lt;strong&gt;The Data Visualization Checklist&lt;/strong&gt;&lt;/a&gt;: A helpful set of criteria for grading the effectiveness of a graphic.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1kKRadOiF0LruItsvGA40fSDZkAQfCqC_Ela0gBdo8A4/edit&#34;&gt;&lt;strong&gt;Data Literacy Starter Kit&lt;/strong&gt;&lt;/a&gt;: Compilation of resources to become data literate by &lt;a href=&#34;http://lauracalloway.com/&#34;&gt;Laura Calloway&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://seeingdata.org/&#34;&gt;&lt;strong&gt;Seeing Data&lt;/strong&gt;&lt;/a&gt;: A series of research projects about perceptions and visualizations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-in-excel&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization in Excel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stephanieevergreen.com/how-to/&#34;&gt;&lt;strong&gt;How to Build Data Visualizations in Excel&lt;/strong&gt;&lt;/a&gt;: Detailed tutorials for creating 14 different visualizations in Excel.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://annkemery.com/category/visualizing-data/tutorials/&#34;&gt;&lt;strong&gt;Ann Emery’s tutorials&lt;/strong&gt;&lt;/a&gt;: Fantastic series of tutorials for creating charts in Excel.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-in-tableau&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization in Tableau&lt;/h2&gt;
&lt;p&gt;Because it is focused entirely on visualization (and because it’s a well-supported commercial product), Tableau has a &lt;a href=&#34;https://www.tableau.com/learn/training&#34;&gt;phenomenal library of tutorials and training videos&lt;/a&gt;. There’s &lt;a href=&#34;https://www.quora.com/What-are-some-good-video-tutorials-for-learning-Tableau&#34;&gt;a helpful collections of videos here&lt;/a&gt;, as well.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Final project</title>
      <link>https://uvaDS8104.github.io/assignment/final-project/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/assignment/final-project/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-from-the-internet&#34;&gt;Data from the internet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#nonprofit-management&#34;&gt;Nonprofit management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#federal-state-and-local-government-management&#34;&gt;Federal, state, and local government management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#business-management&#34;&gt;Business management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#instructions&#34;&gt;Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final-deliverables&#34;&gt;Final deliverables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#past-examples&#34;&gt;Past examples&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#travel-runs-in-yellowstone&#34;&gt;Travel runs in Yellowstone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#firefighter-fatalities&#34;&gt;Firefighter fatalities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scripture-use-by-the-killers&#34;&gt;Scripture use by &lt;em&gt;The Killers&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#utah-nonprofits&#34;&gt;Utah nonprofits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#buckethead&#34;&gt;Buckethead&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;You made it to the end of our whirlwind tour of data visualization principles! Congratulations!&lt;/p&gt;
&lt;p&gt;Now you get to show off all the tools you learned with a beautiful, truthful, narrative visualization.&lt;/p&gt;
&lt;p&gt;For your final project, you will take a dataset, explore it, tinker with it, and tell a nuanced story about it using at least three graphs.&lt;/p&gt;
&lt;p&gt;I want this project to be as useful for you and your future career as possible—you’ll hopefully want to show off your final project in a portfolio or during job interviews.&lt;/p&gt;
&lt;p&gt;Accordingly, you have some choice in what data you can use for this project. I’ve found several different high-quality datasets online related to the core MPA/MPP tracks. &lt;strong&gt;You do not have to choose a dataset in your given field&lt;/strong&gt; (especially if you’re not an MPA or MPP student!) Choose whatever one you are most interested in or will have the most fun with.&lt;/p&gt;
&lt;div id=&#34;data-from-the-internet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data from the internet&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/resource/data/&#34;&gt;Go to this list of data sources&lt;/a&gt; and find something interesting! The things in the “Data is Plural” newsletter are often especially interesting and fun. Here are some different high-quality datasets that students have worked with before:&lt;/p&gt;
&lt;div id=&#34;nonprofit-management&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Nonprofit management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/crawford/us-charities-and-nonprofits&#34;&gt;U.S. Charities and Non-profits&lt;/a&gt;: All of the charities and nonprofits registered with the IRS. This is actually split into six separate files. You can combine them all into one massive national database with &lt;code&gt;bind_rows()&lt;/code&gt;, or filter the data to include specific states (or a single state). It all depends on the story you’re telling. Source: IRS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://data.world/causebot/grant-2010-to-2016&#34;&gt;Nonprofit Grants 2010 to 2016&lt;/a&gt;: Nonprofit grants made in the US as listed in Schedule I of the IRS 990 tax form between 2010 to 2016. Source: IRS.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;federal-state-and-local-government-management&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Federal, state, and local government management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/kwullum/deadly-traffic-accidents-in-the-uk-2015&#34;&gt;Deadly traffic accidents in the UK (2015)&lt;/a&gt;: List of all traffic-related deaths in the UK in 2015. Source: &lt;a href=&#34;https://data.gov.uk/dataset/road-accidents-safety-data/resource/ceb00cff-443d-4d43-b17a-ee13437e9564&#34;&gt;data.gov.uk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/fema/firefighter-fatalities&#34;&gt;Firefighter Fatalities in the United States&lt;/a&gt;: Name, rank, and cause of death for all firefighters killed since 2000. Source: FEMA.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/fema/federal-disasters&#34;&gt;Federal Emergencies and Disasters, 1953–Present&lt;/a&gt;: Every federal emergency or disaster declared by the President of the United States since 1953. Source: FEMA.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/START-UMD/gtd&#34;&gt;Global Terrorism Database (1970–2016)&lt;/a&gt;: 170,000 terrorist attacks worldwide, 1970-2016. Source: National Consortium for the Study of Terrorism and Responses to Terrorism (START), University of Maryland.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://data.world/cityofaustin/i26j-ai4z&#34;&gt;City of Austin 311 Unified Data&lt;/a&gt;: All 311 calls to the City of Austin since 2014. Source: City of Austin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;business-management&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Business management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/jiashenliu/515k-hotel-reviews-data-in-europe&#34;&gt;515K Hotel Reviews Data in Europe&lt;/a&gt;: 515,000 customer reviews and scoring of 1,493 luxury hotels across Europe. Source: Booking.com.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/chasebank/bank-deposits&#34;&gt;Chase Bank Branch Deposits, 2010–2016&lt;/a&gt;: Records for every branch of Chase Bank in the United States. This dataset is not quite tidy and will require a little bit of reshaping with &lt;code&gt;gather()&lt;/code&gt; or &lt;code&gt;pivot_longer()&lt;/code&gt;, since there are individual columns of deposits per year. Source: Chase Bank.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;instructions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Instructions&lt;/h2&gt;
&lt;p&gt;Here’s what you’ll need to do:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt; a dataset and explore it. Many of these datasets are large and will not open (well) in Excel, so you’ll need to load the CSV file into R with &lt;code&gt;read_csv()&lt;/code&gt;. Most of these datasets have nice categorical variables that you can use for grouping and summarizing, and many have time components too, so you can look at trends. Your past problem sets and in-class examples will come in handy here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find&lt;/strong&gt; a story in the data. Explore that story and make sure it’s true and insightful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use R to &lt;strong&gt;create&lt;/strong&gt; multiple graphs to tell the story. You can make as many graphs as you want, but you must use at least &lt;strong&gt;three&lt;/strong&gt; different chart types (i.e. don’t just make three scatterplots or three maps).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Export these figures as PDF files, place them in Adobe Illustrator (or InDesign or Gravit Designer or Inkscape), and &lt;strong&gt;make&lt;/strong&gt; one combined graphic or handout where you tell the complete story. You have a lot of latitude in how you do this. You can make a graphic-heavy one-page handout. You can make something along the lines of the &lt;a href=&#34;https://www.wired.co.uk/article/nuclear-power-reactors-global&#34;&gt;this&lt;/a&gt;, with one big graphic + smaller subgraphics + explanatory text. Just don’t make a &lt;a href=&#34;https://medium.com/@kazarnowicz/why-infographics-are-bad-3a2fa49673e2&#34;&gt;goofy infographic&lt;/a&gt;. Whatever you do, the final figure must include all the graphics, must have some explanatory text to help summarize the narrative, and must be well designed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Export&lt;/strong&gt; the final graphic from Illustrator as a PDF and a PNG.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write&lt;/strong&gt; a memo using R Markdown to introduce, frame, and describe your story and figure. &lt;a href=&#34;https://uvaDS8104.github.io/files/your_name_finalproject.Rmd&#34;&gt;Use this template to get started&lt;/a&gt;. You should include the following in the memo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executive summary&lt;/li&gt;
&lt;li&gt;Background information and summary of the data&lt;/li&gt;
&lt;li&gt;Explanation, description, and code for each individual figure&lt;/li&gt;
&lt;li&gt;Explanation and description for the final figure&lt;/li&gt;
&lt;li&gt;Final figure should be included as an image (remember &lt;code&gt;![Caption goes here](path/to/file.png)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember to follow R Markdown etiquette rules and style—don’t have it output extraneous messages or warnings, include summary tables in nice tables, adjust the dimensions for your figures, and remove the placeholder text that’s in the template already (i.e. I don’t want to see stuff like “Describe and show how you cleaned and reshaped the data” in the final report.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You should &lt;a href=&#34;https://uvaDS8104.github.io/projects/example_final.zip&#34;&gt;download a full example of what a final project might look like&lt;/a&gt;&lt;/strong&gt; (but don’t make your final combined visualization look exactly like this—show some creativity!)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-deliverables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Final deliverables&lt;/h2&gt;
&lt;p&gt;Upload the following files to iCollege:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;A memo introducing and describing your final graphic (see full instructions above)&lt;/li&gt;
&lt;li&gt;A standalone PDF of your graphic exported from Illustrator&lt;/li&gt;
&lt;li&gt;A standalone PNG of your graphic exported from Illustrator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;No late work will be accepted for this project since it’s the last project and it counts as your final.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I will use &lt;a href=&#34;https://uvaDS8104.github.io/files/final-project-rubric.xlsx&#34;&gt;this rubric&lt;/a&gt; to grade the final product:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/final-project-rubric.xlsx&#34;&gt;&lt;i class=&#34;fas fa-file-excel&#34;&gt;&lt;/i&gt; &lt;code&gt;final-project-rubric.xlsx&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am happy to give feedback and help along the way—please don’t hesitate to get help! My goal is for you to have a beautiful graphic in the end that you’ll want to show off to all your friends, family, neighbors, employers, and strangers on the street—I’m not trying to trip you up or give you trick questions!&lt;/p&gt;
&lt;p&gt;And that’s it. &lt;strong&gt;You’re done!&lt;/strong&gt; Go out into the world now and make beautiful, insightful, and truthful graphics.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://24ways.org/2010/go-forth-and-make-awesomeness/&#34;&gt;&lt;strong&gt;Go forth and make awesomeness.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;past-examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Past examples&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/projects/example_final.zip&#34;&gt;Download a full example of what a final project might look like.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some great examples of student projects from past versions of this class.&lt;/p&gt;
&lt;div id=&#34;travel-runs-in-yellowstone&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Travel runs in Yellowstone&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/yellowstone-travel/final_memo.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Project description&lt;/a&gt; 
&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/yellowstone-travel/final.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Final PDF&lt;/a&gt; 
&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/yellowstone-travel/final.png&#34;&gt;&lt;i class=&#34;far fa-image&#34;&gt;&lt;/i&gt; Final PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/yellowstone-travel/final.pdf&#34;&gt;&lt;img src=&#34;https://uvaDS8104.github.io/files/past-projects/yellowstone-travel/final.png&#34; alt=&#34;Yellowstone travel final project&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;firefighter-fatalities&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Firefighter fatalities&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/firefighters/final_memo.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Project description&lt;/a&gt; 
&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/firefighters/final.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Final PDF&lt;/a&gt; 
&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/firefighters/final.png&#34;&gt;&lt;i class=&#34;far fa-image&#34;&gt;&lt;/i&gt; Final PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/firefighters/final.pdf&#34;&gt;&lt;img src=&#34;https://uvaDS8104.github.io/files/past-projects/firefighters/final.png&#34; alt=&#34;Firefighter fatalities final project&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scripture-use-by-the-killers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scripture use by &lt;em&gt;The Killers&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/killers-scripture/final_memo.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Project description&lt;/a&gt; 
&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/killers-scripture/final.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Final PDF&lt;/a&gt; 
&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/killers-scripture/final.png&#34;&gt;&lt;i class=&#34;far fa-image&#34;&gt;&lt;/i&gt; Final PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/killers-scripture/final.pdf&#34;&gt;&lt;img src=&#34;https://uvaDS8104.github.io/files/past-projects/killers-scripture/final.png&#34; alt=&#34;Firefighter fatalities final project&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;utah-nonprofits&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Utah nonprofits&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/utah-nonprofits/final_memo.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Project description&lt;/a&gt; 
&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/utah-nonprofits/final.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Final PDF&lt;/a&gt; 
&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/utah-nonprofits/final.png&#34;&gt;&lt;i class=&#34;far fa-image&#34;&gt;&lt;/i&gt; Final PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/utah-nonprofits/final.pdf&#34;&gt;&lt;img src=&#34;https://uvaDS8104.github.io/files/past-projects/utah-nonprofits/final.png&#34; alt=&#34;Firefighter fatalities final project&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;buckethead&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Buckethead&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/buckethead/final_memo.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Project description&lt;/a&gt; 
&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/buckethead/final.pdf&#34;&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Final PDF&lt;/a&gt; 
&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/buckethead/final.png&#34;&gt;&lt;i class=&#34;far fa-image&#34;&gt;&lt;/i&gt; Final PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://uvaDS8104.github.io/files/past-projects/buckethead/final.pdf&#34;&gt;&lt;img src=&#34;https://uvaDS8104.github.io/files/past-projects/buckethead/final.png&#34; alt=&#34;Firefighter fatalities final project&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mapping data to graphics</title>
      <link>https://uvaDS8104.github.io/lesson/03-lesson/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/03-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#part-1-data-visualization-with-ggplot2&#34;&gt;Part 1: Data visualization with &lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#part-2-reshaping-data-with-tidyr&#34;&gt;Part 2: Reshaping data with &lt;strong&gt;tidyr&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;part-1-data-visualization-with-ggplot2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part 1: Data visualization with &lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;For the first part of today’s lesson, you need to work through RStudio’s introductory primers for &lt;strong&gt;ggplot2&lt;/strong&gt;. You’ll do these in your browser and type code and see results there.&lt;/p&gt;
&lt;p&gt;It seems like there are a lot, but they’re short and go fairly quickly (especially as you get the hang of the &lt;code&gt;ggplot()&lt;/code&gt; syntax). Complete these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Visualize Data&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/3.1&#34;&gt;Exploratory Data Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/3.2&#34;&gt;Bar Charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/3.3&#34;&gt;Histograms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/3.4&#34;&gt;Boxplots and Counts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/3.5&#34;&gt;Scatterplots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/3.6&#34;&gt;Line plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/3.7&#34;&gt;Overplotting and Big Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/3.8&#34;&gt;Customize Your Plots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;part-2-reshaping-data-with-tidyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part 2: Reshaping data with &lt;strong&gt;tidyr&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;For the last part of today’s lesson, you’ll work through just one RStudio primer to learn how to use the &lt;strong&gt;tidyr&lt;/strong&gt; package to reshape data from wide to long and back to wide.&lt;/p&gt;
&lt;p&gt;Complete this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tidy Your Data&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.cloud/learn/primers/4.1&#34;&gt;Reshape Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;Recent versions of &lt;strong&gt;tidyr&lt;/strong&gt; have renamed these core functions: &lt;code&gt;gather()&lt;/code&gt; is now &lt;code&gt;pivot_longer()&lt;/code&gt; and &lt;code&gt;spread()&lt;/code&gt; is now &lt;code&gt;pivot_wider()&lt;/code&gt;. The syntax for these &lt;code&gt;pivot_*()&lt;/code&gt; functions is &lt;em&gt;slightly&lt;/em&gt; different from what it was in &lt;code&gt;gather()&lt;/code&gt; and &lt;code&gt;spread()&lt;/code&gt;, so you can’t just replace the names. Fortunately, both &lt;code&gt;gather()&lt;/code&gt; and &lt;code&gt;spread()&lt;/code&gt; still work and won’t go away for a while, so you can still use them as you learn about reshaping and tidying data. It would be worth learning how the newer &lt;code&gt;pivot_*()&lt;/code&gt; functions work, eventually, though (&lt;a href=&#34;https://tidyr.tidyverse.org/articles/pivot.html&#34;&gt;see here for examples&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using R Markdown</title>
      <link>https://uvaDS8104.github.io/resource/rmarkdown/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/resource/rmarkdown/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#key-terms&#34;&gt;Key terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-chunks&#34;&gt;Add chunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chunk-names&#34;&gt;Chunk names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chunk-options&#34;&gt;Chunk options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#inline-chunks&#34;&gt;Inline chunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#output-formats&#34;&gt;Output formats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;R Markdown&lt;/a&gt; is &lt;a href=&#34;https://uvaDS8104.github.io/reference/markdown/&#34;&gt;regular Markdown&lt;/a&gt; with R code and output sprinkled in. You can do everything you can with &lt;a href=&#34;https://uvaDS8104.github.io/reference/markdown/&#34;&gt;regular Markdown&lt;/a&gt;, but you can incorporate graphs, tables, and other R output directly in your document. You can create HTML, PDF, and Word documents, PowerPoint and HTML presentations, websites, books, and even &lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/index.html&#34;&gt;interactive dashboards&lt;/a&gt; with R Markdown. This whole course website is created with R Markdown (and &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;a package named &lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;documentation for R Markdown&lt;/a&gt; is extremely comprehensive, and their &lt;a href=&#34;https://rmarkdown.rstudio.com/lesson-1.html&#34;&gt;tutorials&lt;/a&gt; and &lt;a href=&#34;https://rmarkdown.rstudio.com/lesson-15.html&#34;&gt;cheatsheets&lt;/a&gt; are excellent—rely on those.&lt;/p&gt;
&lt;p&gt;Here are the most important things you’ll need to know about R Markdown in this class:&lt;/p&gt;
&lt;div id=&#34;key-terms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Key terms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Document&lt;/strong&gt;: A Markdown file where you type stuff&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chunk&lt;/strong&gt;: A piece of R code that is included in your document. It looks like this:&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;```{r}
# Code goes here
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There must be an empty line before and after the chunk. The final three backticks must be the only thing on the line—if you add more text, or if you forget to add the backticks, or accidentally delete the backticks, your document will not knit correctly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Knit&lt;/strong&gt;: When you “knit” a document, R runs each of the chunks sequentially and converts the output of each chunk into Markdown. R then runs the knitted document through &lt;a href=&#34;https://pandoc.org/&#34;&gt;pandoc&lt;/a&gt; to convert it to HTML or PDF or Word (or whatever output you’ve selected).&lt;/p&gt;
&lt;p&gt;You can knit by clicking on the “Knit” button at the top of the editor window, or by pressing &lt;code&gt;⌘⇧K&lt;/code&gt; on macOS or &lt;code&gt;control + shift + K&lt;/code&gt; on Windows.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/assignments/knit-button.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;add-chunks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add chunks&lt;/h2&gt;
&lt;p&gt;There are three ways to insert chunks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Press &lt;code&gt;⌘⌥I&lt;/code&gt; on macOS or &lt;code&gt;control + alt + I&lt;/code&gt; on Windows&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the “Insert” button at the top of the editor window&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/reference/insert-chunk.png&#34; width=&#34;30%&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manually type all the backticks and curly braces (don’t do this)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;chunk-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chunk names&lt;/h2&gt;
&lt;p&gt;You can add names to chunks to make it easier to navigate your document. If you click on the little dropdown menu at the bottom of your editor in RStudio, you can see a table of contents that shows all the headings and chunks. If you name chunks, they’ll appear in the list. If you don’t include a name, the chunk will still show up, but you won’t know what it does.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/reference/chunk-toc.png&#34; width=&#34;40%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To add a name, include it immediately after the &lt;code&gt;{r&lt;/code&gt; in the first line of the chunk. Names cannot contain spaces, but they can contain underscores and dashes. &lt;strong&gt;All chunk names in your document must be unique.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;```{r name-of-this-chunk}
# Code goes here
```&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;chunk-options&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chunk options&lt;/h2&gt;
&lt;p&gt;There are a bunch of different options you can set for each chunk. You can see a complete list in the &lt;a href=&#34;https://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf&#34;&gt;RMarkdown Reference Guide&lt;/a&gt; or at &lt;a href=&#34;https://yihui.org/knitr/options/&#34;&gt;&lt;strong&gt;knitr&lt;/strong&gt;’s website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Options go inside the &lt;code&gt;{r}&lt;/code&gt; section of the chunk:&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;```{r name-of-this-chunk, warning=FALSE, message=FALSE}
# Code goes here
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most common chunk options are these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fig.width=5&lt;/code&gt; and &lt;code&gt;fig.height=3&lt;/code&gt; (&lt;em&gt;or whatever number you want&lt;/em&gt;): Set the dimensions for figures&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo=FALSE&lt;/code&gt;: The code is not shown in the final document, but the results are&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message=FALSE&lt;/code&gt;: Any messages that R generates (like all the notes that appear after you load a package) are omitted&lt;/li&gt;
&lt;li&gt;&lt;code&gt;warning=FALSE&lt;/code&gt;: Any warnings that R generates are omitted&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include=FALSE&lt;/code&gt;: The chunk still runs, but the code and results are not included in the final document&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also set chunk options by clicking on the little gear icon in the top right corner of any chunk:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/reference/chunk-options.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;inline-chunks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inline chunks&lt;/h2&gt;
&lt;p&gt;You can also include R output directly in your text, which is really helpful if you want to report numbers from your analysis. To do this, use &lt;code&gt;`r r_code_here`&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It’s generally easiest to calculate numbers in a regular chunk beforehand and then use an inline chunk to display the value in your text. For instance, this document…&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;```{r find-avg-mpg, echo=FALSE}
avg_mpg &amp;lt;- mean(mtcars$mpg)
```

The average fuel efficiency for cars from 1974 was `r round(avg_mpg, 1)` miles per gallon.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… would knit into this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The average fuel efficiency for cars from 1974 was 20.1 miles per gallon.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;output-formats&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Output formats&lt;/h2&gt;
&lt;p&gt;You can specify what kind of document you create when you knit in the &lt;a href=&#34;https://uvaDS8104.github.io/reference/markdown/#front-matter&#34;&gt;YAML front matter&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;title: &amp;quot;My document&amp;quot;
output:
  html_document: default
  pdf_document: default
  word_document: default&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also click on the down arrow on the “Knit” button to choose the output &lt;em&gt;and&lt;/em&gt; generate the appropriate YAML. If you click on the gear icon next to the “Knit” button and choose “Output options”, you change settings for each specific output type, like default figure dimensions or whether or not a table of contents is included.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/reference/output-options.png&#34; width=&#34;35%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The first output type listed under &lt;code&gt;output:&lt;/code&gt; will be what is generated when you click on the “Knit” button or press the keyboard shortcut (&lt;code&gt;⌘⇧K&lt;/code&gt; on macOS; &lt;code&gt;control + shift + K&lt;/code&gt; on Windows). If you choose a different output with the “Knit” button menu, that output will be moved to the top of the &lt;code&gt;output&lt;/code&gt; section.&lt;/p&gt;
&lt;p&gt;The indentation of the YAML section matters, especially when you have settings nested under each output type. Here’s what a typical &lt;code&gt;output&lt;/code&gt; section might look like:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: &amp;quot;My document&amp;quot;
author: &amp;quot;My name&amp;quot;
date: &amp;quot;January 13, 2020&amp;quot;
output: 
  html_document: 
    toc: yes
    fig_caption: yes
    fig_height: 8
    fig_width: 10
  pdf_document: 
    latex_engine: xelatex  # More modern PDF typesetting engine
    toc: yes
  word_document: 
    toc: yes
    fig_caption: yes
    fig_height: 4
    fig_width: 5
---&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R</title>
      <link>https://uvaDS8104.github.io/resource/r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/resource/r/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#learning-r&#34;&gt;Learning R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r-in-the-wild&#34;&gt;R in the wild&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;learning-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Learning R&lt;/h2&gt;
&lt;p&gt;I highly recommend subscribing to the &lt;a href=&#34;https://rweekly.org/&#34;&gt;R Weekly newsletter&lt;/a&gt;. This e-mail is sent every Monday and is full of helpful tutorials about how to do stuff with R.&lt;/p&gt;
&lt;p&gt;Searching for help with R on Google can sometimes be tricky because the program name is a single letter. Google is generally smart enough to figure out what you mean when you search for “r scatterplot”, but if it does struggle, try searching for “rstats” instead (e.g. “rstats scatterplot”). Also, since most of your R work in this class will deal with &lt;strong&gt;ggplot2&lt;/strong&gt;, it’s often easier to just search for that instead of the letter “r” (e.g. “ggplot scatterplot”).&lt;/p&gt;
&lt;p&gt;If you use Twitter, post R-related questions and content with &lt;a href=&#34;https://twitter.com/search?q=%23rstats&#34;&gt;#rstats&lt;/a&gt;. The community there is exceptionally generous and helpful. Also check out &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt; (a Q&amp;amp;A site with hundreds of thousands of answers to all sorts of programming questions) and &lt;a href=&#34;https://community.rstudio.com/&#34;&gt;RStudio Community&lt;/a&gt; (a forum specifically designed for people using RStudio and the tidyverse (i.e. you)).&lt;/p&gt;
&lt;p&gt;These resources are also really really helpful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://r4ds.had.co.nz/&#34;&gt;&lt;strong&gt;R for Data Science&lt;/strong&gt;&lt;/a&gt;: A free online book for learning the basics of R and the tidyverse.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;&lt;strong&gt;R and RStudio cheat sheets&lt;/strong&gt;&lt;/a&gt;: A large collection of simple cheat sheets for RStudio, &lt;strong&gt;ggplot2&lt;/strong&gt;, and other R-related things.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stat545.com/&#34;&gt;&lt;strong&gt;Stat 545&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://twitter.com/JennyBryan&#34;&gt;Dr. Jenny Bryan&lt;/a&gt; at RStudio has an entire introductory course in R, visualization, and data analysis online.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www2.stat.duke.edu/courses/Fall17/sta112.01/&#34;&gt;&lt;strong&gt;STA 112FS: Data Science&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://twitter.com/minebocek&#34;&gt;Dr. Mine Çetinkaya-Rundel&lt;/a&gt; at the University of Edinburgh / Duke University has an entire introductory course in R, visualization, and data science online.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cslu.ohsu.edu/~bedricks/courses/cs631/&#34;&gt;&lt;strong&gt;CSE 631: Principles &amp;amp; Practice of Data Visualization&lt;/strong&gt;&lt;/a&gt;: Yet another introductory course for R and ggplot2 by &lt;a href=&#34;https://twitter.com/apreshill&#34;&gt;Dr. Alison Presmanes Hill&lt;/a&gt; at RStudio.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;r-in-the-wild&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R in the wild&lt;/h2&gt;
&lt;p&gt;A popular (and increasingly standard) way for sharing your analyses and visualizations is to post an annotated explanation of your process somewhere online. RStudio allows you to publish knitted HTML files directly to &lt;a href=&#34;http://rpubs.com/&#34;&gt;RPubs&lt;/a&gt;, but you can also post your output to a blog or other type of website.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Reading these kinds of posts is one of the best ways to learn R, since they walk you through each step of the process &lt;em&gt;and&lt;/em&gt; show the code and output.&lt;/p&gt;
&lt;p&gt;Here are some of the best examples I’ve come across:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://varianceexplained.org/r/trump-tweets/&#34;&gt;Text analysis of Trump’s tweets confirms he writes only the (angrier) Android half&lt;/a&gt; (with a &lt;a href=&#34;http://varianceexplained.org/r/trump-followup/&#34;&gt;follow-up&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rudeboybert.github.io/fivethirtyeight/articles/bob_ross.html&#34;&gt;Bob Ross - Joy of Painting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rudeboybert.github.io/fivethirtyeight/articles/bechdel.html&#34;&gt;Bechdel analysis using the tidyverse&lt;/a&gt;: There are also a bunch of other examples &lt;a href=&#34;https://rudeboybert.github.io/fivethirtyeight/articles/&#34;&gt;using data from FiveThirtyEight&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/Jwhitman/Final_Project&#34;&gt;Sexism on the Silver Screen: Exploring film’s gender divide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://soc301s2017.netlify.com/group_projects/group5&#34;&gt;Comparison of Quentin Tarantino Movies by Box Office and the Bechdel Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juliasilge.com/blog/who-came-to-vote/&#34;&gt;Who came to vote in Utah’s caucuses?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juliasilge.com/blog/health-care-indicators/&#34;&gt;Health care indicators in Utah counties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juliasilge.com/blog/song-lyrics-across/&#34;&gt;Song lyrics across the United States&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.karawoo.com/2016/09/22/A-decade-ish-of-listening-to-Sigur-Ros&#34;&gt;A decade (ish) of listening to Sigur Rós&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/ry_lisa_elana/chicago&#34;&gt;When is Tom peeping these days?&lt;/a&gt;: There are a also bunch of final projects from other R and data visualization classes &lt;a href=&#34;http://soc301s2017.netlify.com/group-projects/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://rudeboybert.github.io/MATH116/PS/final_project/final_project_outline.html#past_examples&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rud.is/b/2017/09/18/mapping-fall-foliage-with-sf/&#34;&gt;Mapping Fall Foliage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rud.is/b/2017/07/25/r%E2%81%B6-general-attys-distributions/&#34;&gt;General (Attys) Distributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rud.is/b/2017/06/18/r%E2%81%B6-disproving-approval/&#34;&gt;Disproving Approval&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;If you want to be really fancy, you can use &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;blogdown&lt;/a&gt;, which makes a complete website with R Markdown files. That’s actually how this site is built (&lt;a href=&#34;https://github.com/andrewheiss/datavizm20.classes.andrewheiss.com&#34;&gt;see the source code&lt;/a&gt;). You can build your own site &lt;a href=&#34;https://apreshill.rbind.io/post/up-and-running-with-blogdown/&#34;&gt;with this tutorial&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R style suggestions</title>
      <link>https://uvaDS8104.github.io/resource/style/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/resource/style/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-style-conventions&#34;&gt;R style conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#main-style-things-to-pay-attention-to-for-this-class&#34;&gt;Main style things to pay attention to for this class&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#spacing&#34;&gt;Spacing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#long-lines&#34;&gt;Long lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pipes-and-ggplot-layers&#34;&gt;Pipes (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) and ggplot layers (&lt;code&gt;+&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-style-conventions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R style conventions&lt;/h2&gt;
&lt;p&gt;R is fairly forgiving about how you type code (unlike other languages like Python, where miscounting spaces can ruin your code!). All of these things will do exactly the same thing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg %&amp;gt;% 
  filter(cty &amp;gt; 10, class == &amp;quot;compact&amp;quot;)

mpg %&amp;gt;% filter(cty &amp;gt; 10, class == &amp;quot;compact&amp;quot;)

mpg %&amp;gt;% 
  filter(cty &amp;gt; 10, 
         class == &amp;quot;compact&amp;quot;)

mpg %&amp;gt;% filter(cty&amp;gt;10, class==&amp;quot;compact&amp;quot;)

filter(mpg,cty&amp;gt;10,class==&amp;quot;compact&amp;quot;)

mpg %&amp;gt;% 
filter(cty &amp;gt; 10, 
                        class == &amp;quot;compact&amp;quot;)

filter ( mpg,cty&amp;gt;10,     class==&amp;quot;compact&amp;quot; )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you’ll notice that only a few of those iterations (the first three) are easily readable.&lt;/p&gt;
&lt;p&gt;To help improve readability and make it easier to share code with others, there’s &lt;a href=&#34;https://style.tidyverse.org/index.html&#34;&gt;an unofficial style guide for writing R code&lt;/a&gt;. It’s fairly short and just has lots of examples of good and bad ways of writing code (naming variables, dealing with long lines, using proper indentation levels, etc.)—you should glance through it some time.&lt;/p&gt;
&lt;p&gt;RStudio has a built-in way of cleaning up your code. Select some code, press &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; (on Windows) or &lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt; (on macOS), and R will reformat the code for you. It’s not always perfect, but it’s really helpful for getting indentation right without having to manually hit &lt;kbd&gt;space&lt;/kbd&gt; a billion times.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;main-style-things-to-pay-attention-to-for-this-class&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Main style things to pay attention to for this class&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Important note&lt;/em&gt;: I won’t ever grade you on any of this! If you submit something like &lt;code&gt;filter(mpg,cty&amp;gt;10,class==&#34;compact&#34;)&lt;/code&gt;, I might recommend adding spaces, but it won’t affect your grade or points or anything.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;spacing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Spacing&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;See the &lt;a href=&#34;https://style.tidyverse.org/syntax.html#spacing&#34;&gt;“Spacing” section&lt;/a&gt; in the tidyverse style guide.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Put spaces after commas (like in regular English):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
filter(mpg, cty &amp;gt; 10)

# Bad
filter(mpg , cty &amp;gt; 10)
filter(mpg ,cty &amp;gt; 10)
filter(mpg,cty &amp;gt; 10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Put spaces around operators like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, etc.:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
filter(mpg, cty &amp;gt; 10)

# Bad
filter(mpg, cty&amp;gt;10)
filter(mpg, cty&amp;gt; 10)
filter(mpg, cty &amp;gt;10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don’t put spaces around parentheses that are parts of functions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
filter(mpg, cty &amp;gt; 10)

# Bad
filter (mpg, cty &amp;gt; 10)
filter ( mpg, cty &amp;gt; 10)
filter( mpg, cty &amp;gt; 10 )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;long-lines&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Long lines&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;See the &lt;a href=&#34;https://style.tidyverse.org/syntax.html#long-lines&#34;&gt;“Long lines” section&lt;/a&gt; in the tidyverse style guide.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s generally good practice to not have really long lines of code. A good suggestion is to keep lines at a maximum of 80 characters. Instead of counting characters by hand (ew), in RStudio go to “Tools” &amp;gt; “Global Options” &amp;gt; “Code” &amp;gt; “Display” and check the box for “Show margin”. You should now see a really thin line indicating 80 characters. Again, you can go beyond this—that’s fine. It’s just good practice to avoid going too far past it.&lt;/p&gt;
&lt;p&gt;You can add line breaks inside longer lines of code. Line breaks should come after commas, and things like function arguments should align within the function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
filter(mpg, cty &amp;gt; 10, class == &amp;quot;compact&amp;quot;)

# Good
filter(mpg, cty &amp;gt; 10, 
       class == &amp;quot;compact&amp;quot;)

# Good
filter(mpg,
       cty &amp;gt; 10,
       class == &amp;quot;compact&amp;quot;)

# Bad
filter(mpg, cty &amp;gt; 10, class %in% c(&amp;quot;compact&amp;quot;, &amp;quot;pickup&amp;quot;, &amp;quot;midsize&amp;quot;, &amp;quot;subcompact&amp;quot;, &amp;quot;suv&amp;quot;, &amp;quot;2seater&amp;quot;, &amp;quot;minivan&amp;quot;))

# Good
filter(mpg, 
       cty &amp;gt; 10, 
       class %in% c(&amp;quot;compact&amp;quot;, &amp;quot;pickup&amp;quot;, &amp;quot;midsize&amp;quot;, &amp;quot;subcompact&amp;quot;, 
                    &amp;quot;suv&amp;quot;, &amp;quot;2seater&amp;quot;, &amp;quot;minivan&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pipes-and-ggplot-layers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pipes (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) and ggplot layers (&lt;code&gt;+&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Put each layer of a ggplot plot on separate lines, with the &lt;code&gt;+&lt;/code&gt; at the end of the line, indented with two spaces:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
ggplot(mpg, aes(x = cty, y = hwy, color = class)) +
  geom_point() +
  geom_smooth() +
  theme_bw()

# Bad
ggplot(mpg, aes(x = cty, y = hwy, color = class)) +
  geom_point() + geom_smooth() +
  theme_bw()

# Super bad
ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw()

# Super bad and won&amp;#39;t even work
ggplot(mpg, aes(x = cty, y = hwy, color = class))
  + geom_point()
  + geom_smooth() 
  + theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Put each step in a dplyr pipeline on separate lines, with the &lt;code&gt;%&amp;gt;%&lt;/code&gt; at the end of the line, indented with two spaces:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
mpg %&amp;gt;% 
  filter(cty &amp;gt; 10) %&amp;gt;% 
  group_by(class) %&amp;gt;% 
  summarize(avg_hwy = mean(hwy))

# Bad
mpg %&amp;gt;% filter(cty &amp;gt; 10) %&amp;gt;% group_by(class) %&amp;gt;% 
  summarize(avg_hwy = mean(hwy))

# Super bad
mpg %&amp;gt;% filter(cty &amp;gt; 10) %&amp;gt;% group_by(class) %&amp;gt;% summarize(avg_hwy = mean(hwy))

# Super bad and won&amp;#39;t even work
mpg %&amp;gt;% 
  filter(cty &amp;gt; 10)
  %&amp;gt;% group_by(class)
  %&amp;gt;% summarize(avg_hwy = mean(hwy))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;comments&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Comments&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;See the &lt;a href=&#34;https://style.tidyverse.org/syntax.html#comments&#34;&gt;“Comments” section&lt;/a&gt; in the tidyverse style guide.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Comments should start with a comment symbol and a single space: &lt;code&gt;#&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good

#Bad

    #Bad&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the comment is really short (and won’t cause you to go over 80 characters in the line), you can include it in the same line as the code, separated by at least two spaces (it works with one space, but using a couple can enhance readability):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg %&amp;gt;% 
  filter(cty &amp;gt; 10) %&amp;gt;%  # Only rows where cty is 10 +
  group_by(class) %&amp;gt;%  # Divide into class groups
  summarize(avg_hwy = mean(hwy))  # Find the average hwy in each group&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add extra spaces to get inline comments to align, if you want:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg %&amp;gt;% 
  filter(cty &amp;gt; 10) %&amp;gt;%            # Only rows where cty is 10 +
  group_by(class) %&amp;gt;%             # Divide into class groups
  summarize(avg_hwy = mean(hwy))  # Find the average hwy in each group&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the comment is really long, you can break it into multiple lines. RStudio can do this for you if you go to “Code” &amp;gt; “Reflow comment”&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Good
# Happy families are all alike; every unhappy family is unhappy in its own way.
# Everything was in confusion in the Oblonskys’ house. The wife had discovered
# that the husband was carrying on an intrigue with a French girl, who had been
# a governess in their family, and she had announced to her husband that she
# could not go on living in the same house with him. This position of affairs
# had now lasted three days, and not only the husband and wife themselves, but
# all the members of their family and household, were painfully conscious of it.

# Bad
# Happy families are all alike; every unhappy family is unhappy in its own way. Everything was in confusion in the Oblonskys’ house. The wife had discovered that the husband was carrying on an intrigue with a French girl, who had been a governess in their family, and she had announced to her husband that she could not go on living in the same house with him. This position of affairs had now lasted three days, and not only the husband and wife themselves, but all the members of their family and household, were painfully conscious of it.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Though, if you’re dealing with comments that are &lt;em&gt;that&lt;/em&gt; long, consider putting the text in R Markdown instead and having it be actual prose.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Amounts and proportions</title>
      <link>https://uvaDS8104.github.io/lesson/04-lesson/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/04-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#manipulating-data-with-dplyr&#34;&gt;Manipulating data with &lt;strong&gt;dplyr&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#filtering-with-filter&#34;&gt;Filtering with &lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-new-columns-with-mutate&#34;&gt;Adding new columns with &lt;code&gt;mutate()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-multiple-verbs-with-pipes&#34;&gt;Combining multiple verbs with pipes (&lt;code&gt;%&amp;gt;%&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summarizing-data-by-groups-with-group_by-summarize&#34;&gt;Summarizing data by groups with &lt;code&gt;group_by() %&amp;gt;% summarize()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#selecting-with-select&#34;&gt;Selecting with &lt;code&gt;select()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arranging-data-with-arrange&#34;&gt;Arranging data with &lt;code&gt;arrange()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#thats-it&#34;&gt;That’s it!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#changing-colors-shapes-and-sizes-with-scale_&#34;&gt;Changing colors, shapes, and sizes, with &lt;code&gt;scale_*()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;When you visualize proportions with ggplot, you’ll typically go through a two-step process:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Summarize the data with &lt;strong&gt;dplyr&lt;/strong&gt; (typically with a combination of &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Plot the summarized data&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;manipulating-data-with-dplyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Manipulating data with &lt;strong&gt;dplyr&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You had some experience with &lt;strong&gt;dplyr&lt;/strong&gt; functions in the RStudio primers, but we’ll briefly review them here.&lt;/p&gt;
&lt;p&gt;There are 6 important verbs that you’ll typically use when working with data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract rows/cases with &lt;code&gt;filter()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extract columns/variables with &lt;code&gt;select()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Arrange/sort rows with &lt;code&gt;arrange()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make new columns/variables with &lt;code&gt;mutate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make group summaries with &lt;code&gt;group_by %&amp;gt;% summarize()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every &lt;strong&gt;dplyr&lt;/strong&gt; verb follows the same pattern. The first argument is always a data frame, and the function always returns a data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:pink&#39;&gt;VERB&lt;/span&gt;(&lt;span style=&#39;background-color:yellow&#39;&gt;DATA_TO_TRANSFORM&lt;/span&gt;, &lt;span style=&#39;background-color:lightblue&#39;&gt;STUFF_IT_DOES&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;filtering-with-filter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Filtering with &lt;code&gt;filter()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; function takes two arguments: a data frame to transform, and a set of tests. It will return each row for which the test is TRUE.&lt;/p&gt;
&lt;p&gt;This code, for instance, will look at the &lt;code&gt;gapminder&lt;/code&gt; dataset and return all rows where &lt;code&gt;country&lt;/code&gt; is equal to “Denmark”:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:pink&#39;&gt;filter&lt;/span&gt;(&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt;, &lt;span style=&#39;background-color:lightblue&#39;&gt;country == &#34;Denmark&#34;&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 12 x 6
##    country continent  year lifeExp     pop gdpPercap
##    &amp;lt;fct&amp;gt;   &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 Denmark Europe     1952    70.8 4334000     9692.
##  2 Denmark Europe     1957    71.8 4487831    11100.
##  3 Denmark Europe     1962    72.4 4646899    13583.
##  4 Denmark Europe     1967    73.0 4838800    15937.
##  5 Denmark Europe     1972    73.5 4991596    18866.
##  6 Denmark Europe     1977    74.7 5088419    20423.
##  7 Denmark Europe     1982    74.6 5117810    21688.
##  8 Denmark Europe     1987    74.8 5127024    25116.
##  9 Denmark Europe     1992    75.3 5171393    26407.
## 10 Denmark Europe     1997    76.1 5283663    29804.
## 11 Denmark Europe     2002    77.2 5374693    32167.
## 12 Denmark Europe     2007    78.3 5468120    35278.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that there are two equal signs (&lt;code&gt;==&lt;/code&gt;). This is because it’s a logical test, similar to greater than (&lt;code&gt;&amp;gt;&lt;/code&gt;) or less than (&lt;code&gt;&amp;lt;&lt;/code&gt;). When you use a single equal sign, you set an argument (like &lt;code&gt;data = gapminder&lt;/code&gt;); when you use two, you are doing a test. There are lots of different ways to do logical tests:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Test&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;x &amp;lt; y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Less than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;x &amp;gt; y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;x == y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;x &amp;lt;= y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Less than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;x &amp;gt;= y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;x != y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Not equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;x %in% y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;In (group membership)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;is.na(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Is missing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;!is.na(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Is not missing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Use &lt;code&gt;filter()&lt;/code&gt; and logical tests to show:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The data for Canada&lt;/li&gt;
&lt;li&gt;All data for countries in Oceania&lt;/li&gt;
&lt;li&gt;Rows where life expectancy is greater than 82&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-04-lesson-dplyr1&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-1/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-04-lesson-dplyr1&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;You can also use multiple conditions, and these will extract rows that meet every test. By default, if you separate the tests with a comma, R will consider this an “and” test and find rows that are &lt;em&gt;both&lt;/em&gt; Denmark and greater than 2000.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:pink&#39;&gt;filter&lt;/span&gt;(&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt;, &lt;span style=&#39;background-color:lightblue&#39;&gt;country == &#34;Denmark&#34;, year &gt; 2000&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 2 x 6
##   country continent  year lifeExp     pop gdpPercap
##   &amp;lt;fct&amp;gt;   &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Denmark Europe     2002    77.2 5374693    32167.
## 2 Denmark Europe     2007    78.3 5468120    35278.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use “or” with “&lt;code&gt;|&lt;/code&gt;” and “not” with “&lt;code&gt;!&lt;/code&gt;”:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;a &amp;amp; b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;a | b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;!a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Use &lt;code&gt;filter()&lt;/code&gt; and logical tests to show:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Canada before 1970&lt;/li&gt;
&lt;li&gt;Countries where life expectancy in 2007 is below 50&lt;/li&gt;
&lt;li&gt;Countries where life expectancy in 2007 is below 50 and are not in Africa&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-04-lesson-dplyr2&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-2/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-04-lesson-dplyr2&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;Beware of some common mistakes! You can’t collapse multiple tests into one. Instead, use two separate tests:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This won&amp;#39;t work!
filter(gapminder, 1960 &amp;lt; year &amp;lt; 1980)

# This will work
filter(gapminder, 1960 &amp;lt; year, year &amp;lt; 1980)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, you can avoid stringing together lots of tests by using the &lt;code&gt;%in%&lt;/code&gt; operator, which checks to see if a value is in a list of values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This works, but is tedious
filter(gapminder, 
       country == &amp;quot;Mexico&amp;quot; | country == &amp;quot;Canada&amp;quot; | country == &amp;quot;United States&amp;quot;)

# This is more concise and easier to add other countries later
filter(gapminder, 
       country %in% c(&amp;quot;Mexico&amp;quot;, &amp;quot;Canada&amp;quot;, &amp;quot;United States&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-new-columns-with-mutate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Adding new columns with &lt;code&gt;mutate()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You create new columns with the &lt;code&gt;mutate()&lt;/code&gt; function. You can create a single column like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:pink&#39;&gt;mutate&lt;/span&gt;(&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt;, &lt;span style=&#39;background-color:lightblue&#39;&gt;gdp = gdpPercap * pop&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 7
##    country     continent  year lifeExp      pop gdpPercap          gdp
##    &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;
##  1 Afghanistan Asia       1952    28.8  8425333      779.  6567086330.
##  2 Afghanistan Asia       1957    30.3  9240934      821.  7585448670.
##  3 Afghanistan Asia       1962    32.0 10267083      853.  8758855797.
##  4 Afghanistan Asia       1967    34.0 11537966      836.  9648014150.
##  5 Afghanistan Asia       1972    36.1 13079460      740.  9678553274.
##  6 Afghanistan Asia       1977    38.4 14880372      786. 11697659231.
##  7 Afghanistan Asia       1982    39.9 12881816      978. 12598563401.
##  8 Afghanistan Asia       1987    40.8 13867957      852. 11820990309.
##  9 Afghanistan Asia       1992    41.7 16317921      649. 10595901589.
## 10 Afghanistan Asia       1997    41.8 22227415      635. 14121995875.
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you can create multiple columns by including a comma-separated list of new columns to create:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:pink&#39;&gt;mutate&lt;/span&gt;(&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt;, &lt;span style=&#39;background-color:lightblue&#39;&gt;gdp = gdpPercap * pop&lt;/span&gt;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#39;background-color:lightblue&#39;&gt;pop_mill = round(pop / 1000000)&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 8
##    country     continent  year lifeExp      pop gdpPercap          gdp pop_mill
##    &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 Afghanistan Asia       1952    28.8  8425333      779.  6567086330.        8
##  2 Afghanistan Asia       1957    30.3  9240934      821.  7585448670.        9
##  3 Afghanistan Asia       1962    32.0 10267083      853.  8758855797.       10
##  4 Afghanistan Asia       1967    34.0 11537966      836.  9648014150.       12
##  5 Afghanistan Asia       1972    36.1 13079460      740.  9678553274.       13
##  6 Afghanistan Asia       1977    38.4 14880372      786. 11697659231.       15
##  7 Afghanistan Asia       1982    39.9 12881816      978. 12598563401.       13
##  8 Afghanistan Asia       1987    40.8 13867957      852. 11820990309.       14
##  9 Afghanistan Asia       1992    41.7 16317921      649. 10595901589.       16
## 10 Afghanistan Asia       1997    41.8 22227415      635. 14121995875.       22
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also do conditional tests within &lt;code&gt;mutate()&lt;/code&gt; using the &lt;code&gt;ifelse()&lt;/code&gt; function. This works like the &lt;code&gt;=IFELSE&lt;/code&gt; function in Excel. Feed the function three arguments: (1) a test, (2) the value if the test is true, and (3) the value if the test is false:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;ifelse(&lt;span style=&#39;background-color:#faca7d&#39;&gt;TEST&lt;/span&gt;, &lt;span style=&#39;background-color:#9bbffa&#39;&gt;VALUE_IF_TRUE&lt;/span&gt;, &lt;span style=&#39;background-color:#f79b94&#39;&gt;VALUE_IF_FALSE&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can create a new column that is a binary indicator for whether the country’s row is after 1960:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;mutate(gapminder, after_1960 = ifelse(&lt;span style=&#39;background-color:#faca7d&#39;&gt;year &gt; 1960&lt;/span&gt;, &lt;span style=&#39;background-color:#9bbffa&#39;&gt;TRUE&lt;/span&gt;, &lt;span style=&#39;background-color:#f79b94&#39;&gt;FALSE&lt;/span&gt;))&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 7
##    country     continent  year lifeExp      pop gdpPercap after_1960
##    &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;     
##  1 Afghanistan Asia       1952    28.8  8425333      779. FALSE     
##  2 Afghanistan Asia       1957    30.3  9240934      821. FALSE     
##  3 Afghanistan Asia       1962    32.0 10267083      853. TRUE      
##  4 Afghanistan Asia       1967    34.0 11537966      836. TRUE      
##  5 Afghanistan Asia       1972    36.1 13079460      740. TRUE      
##  6 Afghanistan Asia       1977    38.4 14880372      786. TRUE      
##  7 Afghanistan Asia       1982    39.9 12881816      978. TRUE      
##  8 Afghanistan Asia       1987    40.8 13867957      852. TRUE      
##  9 Afghanistan Asia       1992    41.7 16317921      649. TRUE      
## 10 Afghanistan Asia       1997    41.8 22227415      635. TRUE      
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also use text labels instead of &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;mutate(gapminder, &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;after_1960 = ifelse(&lt;span style=&#39;background-color:#faca7d&#39;&gt;year &gt; 1960&lt;/span&gt;, &lt;span style=&#39;background-color:#9bbffa&#39;&gt;&#34;After 1960&#34;&lt;/span&gt;, &lt;span style=&#39;background-color:#f79b94&#39;&gt;&#34;Before 1960&#34;&lt;/span&gt;))&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 7
##    country     continent  year lifeExp      pop gdpPercap after_1960 
##    &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      
##  1 Afghanistan Asia       1952    28.8  8425333      779. Before 1960
##  2 Afghanistan Asia       1957    30.3  9240934      821. Before 1960
##  3 Afghanistan Asia       1962    32.0 10267083      853. After 1960 
##  4 Afghanistan Asia       1967    34.0 11537966      836. After 1960 
##  5 Afghanistan Asia       1972    36.1 13079460      740. After 1960 
##  6 Afghanistan Asia       1977    38.4 14880372      786. After 1960 
##  7 Afghanistan Asia       1982    39.9 12881816      978. After 1960 
##  8 Afghanistan Asia       1987    40.8 13867957      852. After 1960 
##  9 Afghanistan Asia       1992    41.7 16317921      649. After 1960 
## 10 Afghanistan Asia       1997    41.8 22227415      635. After 1960 
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Use &lt;code&gt;mutate()&lt;/code&gt; to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Add an &lt;code&gt;africa&lt;/code&gt; column that is TRUE if the country is on the African continent&lt;/li&gt;
&lt;li&gt;Add a column for logged GDP per capita&lt;/li&gt;
&lt;li&gt;Add an &lt;code&gt;africa_asia&lt;/code&gt; column that says “Africa or Asia” if the country is in Africa or Asia, and “Not Africa or Asia” if it’s not&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-04-lesson-dplyr3&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-3/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-04-lesson-dplyr3&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;div id=&#34;combining-multiple-verbs-with-pipes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Combining multiple verbs with pipes (&lt;code&gt;%&amp;gt;%&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;What if you want to filter to include only rows from 2002 &lt;em&gt;and&lt;/em&gt; make a new column with the logged GDP per capita? Doing this requires both &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;mutate()&lt;/code&gt;, so we need to find a way to use both at once.&lt;/p&gt;
&lt;p&gt;One solution is to use intermediate variables for each step:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:#faca7d&#39;&gt;gapminder_2002_filtered&lt;/span&gt; &lt;- filter(gapminder, year == 2002)&lt;br&gt;&lt;br&gt;&lt;span style=&#39;background-color:#9bbffa&#39;&gt;gapminder_2002_logged&lt;/span&gt; &lt;- mutate(&lt;span style=&#39;background-color:#faca7d&#39;&gt;gapminder_2002_filtered&lt;/span&gt;, log_gdpPercap = log(gdpPercap))&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That works fine, but your environment panel will start getting full of lots of intermediate data frames.&lt;/p&gt;
&lt;p&gt;Another solution is to nest the functions inside each other. Remember that all &lt;strong&gt;dplyr&lt;/strong&gt; functions return data frames, so you can feed the results of one into another:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:#faca7d&#39;&gt;filter&lt;/span&gt;(&lt;span style=&#39;background-color:#9bbffa&#39;&gt;mutate(gapminder, log_gdpPercap = log(gdpPercap))&lt;/span&gt;, &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#39;background-color:#faca7d&#39;&gt;year == 2002&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That works too, but it gets &lt;em&gt;really&lt;/em&gt; complicated once you have even more functions, and it’s hard to keep track of which function’s arguments go where. I’d avoid doing this entirely.&lt;/p&gt;
&lt;p&gt;One really nice solution is to use a pipe, or &lt;code&gt;%&amp;gt;%&lt;/code&gt;. &lt;strong&gt;The pipe takes an object on the left and passes it as the first argument of the function on the right&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# gapminder will automatically get placed in the _____ spot
gapminder %&amp;gt;% filter(_____, country == &amp;quot;Canada&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These two lines of code do the same thing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;filter(&lt;span style=&#39;background-color:#f79b94&#39;&gt;gapminder&lt;/span&gt;, country == &#34;Canada&#34;)&lt;br&gt;&lt;br&gt;&lt;span style=&#39;background-color:#f79b94&#39;&gt;gapminder&lt;/span&gt; %&gt;% filter(country == &#34;Canada&#34;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using pipes, you can start with a data frame, pass it to one verb, then pass the output of that verb to the next verb, and so on. &lt;strong&gt;When reading any code with a &lt;code&gt;%&amp;gt;%&lt;/code&gt;, it’s easiest to read the &lt;code&gt;%&amp;gt;%&lt;/code&gt; as “and then”.&lt;/strong&gt; This would read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Take the &lt;code&gt;gapminder&lt;/code&gt; dataset &lt;em&gt;and then&lt;/em&gt; filter it so that it only has rows from 2002 &lt;em&gt;and then&lt;/em&gt; add a new column with the logged GDP per capita&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gapminder %&amp;gt;% 
  filter(year == 2002) %&amp;gt;% 
  mutate(log_gdpPercap = log(gdpPercap))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s another way to think about pipes more conceptually. This isn’t valid R code, obviously, but imagine you’re going to take yourself, and then wake up, get out of bed, get dressed, and leave the house. Writing that whole process as nested functions would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;color:Coral;underline:text-decoration&#39;&gt;leave_house&lt;/span&gt;(&lt;span style=&#39;color:Coral;underline:text-decoration&#39;&gt;get_dressed&lt;/span&gt;(&lt;span style=&#39;color:Coral;underline:text-decoration&#39;&gt;get_out_of_bed&lt;/span&gt;(&lt;span style=&#39;color:Coral;underline:text-decoration&#39;&gt;wake_up&lt;/span&gt;(&lt;span style=&#39;background-color:Aquamarine&#39;&gt;me&lt;/span&gt;, &lt;span style=&#39;color:CornflowerBlue&#39;&gt;time&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;&#34;8:00&#34;&lt;/span&gt;), &lt;span style=&#39;color:CornflowerBlue&#39;&gt;side&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;&#34;correct&#34;&lt;/span&gt;), &lt;span style=&#39;color:CornflowerBlue&#39;&gt;pants&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;TRUE&lt;/span&gt;, &lt;span style=&#39;color:CornflowerBlue&#39;&gt;shirt&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;TRUE&lt;/span&gt;), &lt;span style=&#39;color:CornflowerBlue&#39;&gt;car&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;TRUE&lt;/span&gt;, &lt;span style=&#39;color:CornflowerBlue&#39;&gt;bike&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;FALSE&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of nesting everything, we can use pipes to chain these together. This would read&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Take myself, &lt;em&gt;and then&lt;/em&gt; wake up at 8:00, &lt;em&gt;and then&lt;/em&gt; get out of bed on the correct side, &lt;em&gt;and then&lt;/em&gt; get dressed with pants and a shirt, &lt;em&gt;and then&lt;/em&gt; leave the house in a car&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;me %&gt;% &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span style=&#39;color:Coral;underline:text-decoration&#39;&gt;wake_up&lt;/span&gt;(&lt;span style=&#39;color:CornflowerBlue&#39;&gt;time&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;&#34;8:00&#34;&lt;/span&gt;) %&gt;% &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span style=&#39;color:Coral;underline:text-decoration&#39;&gt;get_out_of_bed&lt;/span&gt;(&lt;span style=&#39;color:CornflowerBlue&#39;&gt;side&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;&#34;correct&#34;&lt;/span&gt;) %&gt;% &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span style=&#39;color:Coral;underline:text-decoration&#39;&gt;get_dressed&lt;/span&gt;(&lt;span style=&#39;color:CornflowerBlue&#39;&gt;pants&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;TRUE&lt;/span&gt;, &lt;span style=&#39;color:CornflowerBlue&#39;&gt;shirt&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;TRUE&lt;/span&gt;) %&gt;% &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span style=&#39;color:Coral;underline:text-decoration&#39;&gt;leave_house&lt;/span&gt;(&lt;span style=&#39;color:CornflowerBlue&#39;&gt;car&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;TRUE&lt;/span&gt;, &lt;span style=&#39;color:CornflowerBlue&#39;&gt;bike&lt;/span&gt; = &lt;span style=&#39;background-color:Aquamarine&#39;&gt;FALSE&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;summarizing-data-by-groups-with-group_by-summarize&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summarizing data by groups with &lt;code&gt;group_by() %&amp;gt;% summarize()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;summarize()&lt;/code&gt; verb takes an entire frame and calculates summary information about it. For instance, this will find the average life expectancy for the whole &lt;code&gt;gapminder&lt;/code&gt; data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt; %&gt;% &lt;span style=&#39;background-color:pink&#39;&gt;summarize&lt;/span&gt;(&lt;span style=&#39;background-color:lightblue&#39;&gt;mean_life = mean(lifeExp)&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1 x 1
##   mean_life
##       &amp;lt;dbl&amp;gt;
## 1      59.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also make multiple summary variables, just like &lt;code&gt;mutate()&lt;/code&gt;, and it will return a column for each:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt; %&gt;% &lt;span style=&#39;background-color:pink&#39;&gt;summarize&lt;/span&gt;(&lt;span style=&#39;background-color:lightblue&#39;&gt;mean_life = mean(lifeExp)&lt;/span&gt;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#39;background-color:lightblue&#39;&gt;min_life = min(lifeExp)&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1 x 2
##   mean_life min_life
##       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1      59.5     23.6
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Use &lt;code&gt;summarize()&lt;/code&gt; to calculate:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The first (minimum) year in the &lt;code&gt;gapminder&lt;/code&gt; dataset&lt;/li&gt;
&lt;li&gt;The last (maximum) year in the dataset&lt;/li&gt;
&lt;li&gt;The number of rows in the dataset (use the &lt;a href=&#34;https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf&#34;&gt;&lt;strong&gt;dplyr&lt;/strong&gt; cheatsheet&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The number of distinct countries in the dataset (use the &lt;a href=&#34;https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf&#34;&gt;&lt;strong&gt;dplyr&lt;/strong&gt; cheatsheet&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-04-lesson-dplyr4&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-4/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-04-lesson-dplyr4&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Use &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt; to calculate the median life expectancy on the African continent in 2007:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-04-lesson-dplyr5&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-5/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-04-lesson-dplyr5&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;Notice that &lt;code&gt;summarize()&lt;/code&gt; on its own summarizes the whole dataset, so you only get a single row back. These values are the averages and minimums for the entire data frame. If you group your data into separate subgroups, you can use &lt;code&gt;summarize()&lt;/code&gt; to calculate summary statistics for each group. Do this with &lt;code&gt;group_by()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;group_by()&lt;/code&gt; function puts rows into groups based on values in a column. If you run this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt; %&gt;% &lt;span style=&#39;background-color:pink&#39;&gt;group_by&lt;/span&gt;(&lt;span style=&#39;background-color:lightblue&#39;&gt;continent&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 6
## # Groups:   continent [5]
##    country     continent  year lifeExp      pop gdpPercap
##    &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 Afghanistan Asia       1952    28.8  8425333      779.
##  2 Afghanistan Asia       1957    30.3  9240934      821.
##  3 Afghanistan Asia       1962    32.0 10267083      853.
##  4 Afghanistan Asia       1967    34.0 11537966      836.
##  5 Afghanistan Asia       1972    36.1 13079460      740.
##  6 Afghanistan Asia       1977    38.4 14880372      786.
##  7 Afghanistan Asia       1982    39.9 12881816      978.
##  8 Afghanistan Asia       1987    40.8 13867957      852.
##  9 Afghanistan Asia       1992    41.7 16317921      649.
## 10 Afghanistan Asia       1997    41.8 22227415      635.
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…you won’t see anything different! R has put the dataset into separate invisible groups behind the scenes, but you haven’t done anything with those groups, so nothing has really happened. If you do things with those groups with &lt;code&gt;summarize()&lt;/code&gt;, though, &lt;code&gt;group_by()&lt;/code&gt; becomes much more useful.&lt;/p&gt;
&lt;p&gt;For instance, this will take the &lt;code&gt;gapminder&lt;/code&gt; data frame, group it by continent, and then summarize it by calculating the number of distinct countries in each group. It will return &lt;em&gt;one row for each group&lt;/em&gt;, so there should be a row for each continent:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gapminder %&amp;gt;% 
  group_by(continent) %&amp;gt;% 
  summarize(n_countries = n_distinct(country)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   continent n_countries
##   &amp;lt;fct&amp;gt;           &amp;lt;int&amp;gt;
## 1 Africa             52
## 2 Americas           25
## 3 Asia               33
## 4 Europe             30
## 5 Oceania             2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can calculate multiple summary statistics, as before:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gapminder %&amp;gt;% 
  group_by(continent) %&amp;gt;% 
  summarize(n_countries = n_distinct(country),
            avg_life_exp = mean(lifeExp)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
##   continent n_countries avg_life_exp
##   &amp;lt;fct&amp;gt;           &amp;lt;int&amp;gt;        &amp;lt;dbl&amp;gt;
## 1 Africa             52         48.9
## 2 Americas           25         64.7
## 3 Asia               33         60.1
## 4 Europe             30         71.9
## 5 Oceania             2         74.3&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Find the minimum, maximum, and median life expectancy for each continent:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-04-lesson-dplyr6&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-6/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-04-lesson-dplyr6&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Find the minimum, maximum, and median life expectancy for each continent in 2007 only:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-04-lesson-dplyr7&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-7/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-04-lesson-dplyr7&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;Finally, you can group by multiple columns and R will create subgroups for every combination of the groups and return the number of rows of combinations. For instance, we can calculate the average life expectancy by both year and continent and we’ll get 60 rows, since there are 5 continents and 12 years (5 × 12 = 60):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gapminder %&amp;gt;% 
  group_by(continent, year) %&amp;gt;% 
  summarize(avg_life_exp = mean(lifeExp)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 60 x 3
## # Groups:   continent [5]
##    continent  year avg_life_exp
##    &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;        &amp;lt;dbl&amp;gt;
##  1 Africa     1952         39.1
##  2 Africa     1957         41.3
##  3 Africa     1962         43.3
##  4 Africa     1967         45.3
##  5 Africa     1972         47.5
##  6 Africa     1977         49.6
##  7 Africa     1982         51.6
##  8 Africa     1987         53.3
##  9 Africa     1992         53.6
## 10 Africa     1997         53.6
## # … with 50 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;selecting-with-select&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Selecting with &lt;code&gt;select()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The last two verbs are far simpler than &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;mutate()&lt;/code&gt;, and &lt;code&gt;group_by() %&amp;gt;% summarize()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can choose specific columns with the &lt;code&gt;select()&lt;/code&gt; verb. This will only keep two columns: &lt;code&gt;lifeExp&lt;/code&gt; and &lt;code&gt;year&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt; %&gt;% &lt;span style=&#39;background-color:pink&#39;&gt;select&lt;/span&gt;(&lt;span style=&#39;background-color:lightblue&#39;&gt;lifeExp, year&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 2
##    lifeExp  year
##      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
##  1    28.8  1952
##  2    30.3  1957
##  3    32.0  1962
##  4    34.0  1967
##  5    36.1  1972
##  6    38.4  1977
##  7    39.9  1982
##  8    40.8  1987
##  9    41.7  1992
## 10    41.8  1997
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can remove specific columns by prefacing the column names with &lt;code&gt;-&lt;/code&gt;, like &lt;code&gt;-lifeExp&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt; %&gt;% &lt;span style=&#39;background-color:pink&#39;&gt;select&lt;/span&gt;(&lt;span style=&#39;background-color:lightblue&#39;&gt;-lifeExp&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 5
##    country     continent  year      pop gdpPercap
##    &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 Afghanistan Asia       1952  8425333      779.
##  2 Afghanistan Asia       1957  9240934      821.
##  3 Afghanistan Asia       1962 10267083      853.
##  4 Afghanistan Asia       1967 11537966      836.
##  5 Afghanistan Asia       1972 13079460      740.
##  6 Afghanistan Asia       1977 14880372      786.
##  7 Afghanistan Asia       1982 12881816      978.
##  8 Afghanistan Asia       1987 13867957      852.
##  9 Afghanistan Asia       1992 16317921      649.
## 10 Afghanistan Asia       1997 22227415      635.
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also rename columns using &lt;code&gt;select()&lt;/code&gt;. Follow this pattern: &lt;code&gt;select(old_name = new_name)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt; %&gt;% &lt;span style=&#39;background-color:pink&#39;&gt;select&lt;/span&gt;(&lt;span style=&#39;background-color:lightblue&#39;&gt;year, country, life_expectancy = lifeExp&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 3
##     year country     life_expectancy
##    &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt;                 &amp;lt;dbl&amp;gt;
##  1  1952 Afghanistan            28.8
##  2  1957 Afghanistan            30.3
##  3  1962 Afghanistan            32.0
##  4  1967 Afghanistan            34.0
##  5  1972 Afghanistan            36.1
##  6  1977 Afghanistan            38.4
##  7  1982 Afghanistan            39.9
##  8  1987 Afghanistan            40.8
##  9  1992 Afghanistan            41.7
## 10  1997 Afghanistan            41.8
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, there’s a special &lt;code&gt;rename()&lt;/code&gt; verb that will, um, rename, while keeping all the other columns:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt; %&gt;% &lt;span style=&#39;background-color:pink&#39;&gt;rename&lt;/span&gt;(&lt;span style=&#39;background-color:lightblue&#39;&gt;life_expectancy = lifeExp&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 6
##    country     continent  year life_expectancy      pop gdpPercap
##    &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;           &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 Afghanistan Asia       1952            28.8  8425333      779.
##  2 Afghanistan Asia       1957            30.3  9240934      821.
##  3 Afghanistan Asia       1962            32.0 10267083      853.
##  4 Afghanistan Asia       1967            34.0 11537966      836.
##  5 Afghanistan Asia       1972            36.1 13079460      740.
##  6 Afghanistan Asia       1977            38.4 14880372      786.
##  7 Afghanistan Asia       1982            39.9 12881816      978.
##  8 Afghanistan Asia       1987            40.8 13867957      852.
##  9 Afghanistan Asia       1992            41.7 16317921      649.
## 10 Afghanistan Asia       1997            41.8 22227415      635.
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;arranging-data-with-arrange&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Arranging data with &lt;code&gt;arrange()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;arrange()&lt;/code&gt; verb sorts data. By default it sorts ascendingly, putting the lowest values first:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt; %&gt;% &lt;span style=&#39;background-color:pink&#39;&gt;arrange&lt;/span&gt;(&lt;span style=&#39;background-color:lightblue&#39;&gt;lifeExp&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 6
##    country      continent  year lifeExp     pop gdpPercap
##    &amp;lt;fct&amp;gt;        &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 Rwanda       Africa     1992    23.6 7290203      737.
##  2 Afghanistan  Asia       1952    28.8 8425333      779.
##  3 Gambia       Africa     1952    30    284320      485.
##  4 Angola       Africa     1952    30.0 4232095     3521.
##  5 Sierra Leone Africa     1952    30.3 2143249      880.
##  6 Afghanistan  Asia       1957    30.3 9240934      821.
##  7 Cambodia     Asia       1977    31.2 6978607      525.
##  8 Mozambique   Africa     1952    31.3 6446316      469.
##  9 Sierra Leone Africa     1957    31.6 2295678     1004.
## 10 Burkina Faso Africa     1952    32.0 4469979      543.
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can reverse that by wrapping the column name with &lt;code&gt;desc()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt; %&gt;% &lt;span style=&#39;background-color:pink&#39;&gt;arrange&lt;/span&gt;(&lt;span style=&#39;background-color:lightblue&#39;&gt;desc(lifeExp)&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 6
##    country          continent  year lifeExp       pop gdpPercap
##    &amp;lt;fct&amp;gt;            &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 Japan            Asia       2007    82.6 127467972    31656.
##  2 Hong Kong, China Asia       2007    82.2   6980412    39725.
##  3 Japan            Asia       2002    82   127065841    28605.
##  4 Iceland          Europe     2007    81.8    301931    36181.
##  5 Switzerland      Europe     2007    81.7   7554661    37506.
##  6 Hong Kong, China Asia       2002    81.5   6762476    30209.
##  7 Australia        Oceania    2007    81.2  20434176    34435.
##  8 Spain            Europe     2007    80.9  40448191    28821.
##  9 Sweden           Europe     2007    80.9   9031088    33860.
## 10 Israel           Asia       2007    80.7   6426679    25523.
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can sort by multiple columns by specifying them in a comma separated list. For example, we can sort by continent and then sort by life expectancy within the continents:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;&lt;span style=&#39;background-color:yellow&#39;&gt;gapminder&lt;/span&gt; %&gt;% &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span style=&#39;background-color:pink&#39;&gt;arrange&lt;/span&gt;(&lt;span style=&#39;background-color:lightblue&#39;&gt;continent, desc(lifeExp)&lt;/span&gt;)&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
## # A tibble: 1,704 x 6
##    country   continent  year lifeExp      pop gdpPercap
##    &amp;lt;fct&amp;gt;     &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 Reunion   Africa     2007    76.4   798094     7670.
##  2 Reunion   Africa     2002    75.7   743981     6316.
##  3 Reunion   Africa     1997    74.8   684810     6072.
##  4 Libya     Africa     2007    74.0  6036914    12057.
##  5 Tunisia   Africa     2007    73.9 10276158     7093.
##  6 Reunion   Africa     1992    73.6   622191     6101.
##  7 Tunisia   Africa     2002    73.0  9770575     5723.
##  8 Mauritius Africa     2007    72.8  1250882    10957.
##  9 Libya     Africa     2002    72.7  5368585     9535.
## 10 Algeria   Africa     2007    72.3 33333216     6223.
## # … with 1,694 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;thats-it&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;That’s it!&lt;/h3&gt;
&lt;p&gt;Those are the main verbs you’ll deal with in this class. There are dozens of other really useful ones—check out the &lt;a href=&#34;https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf&#34;&gt;&lt;strong&gt;dplyr&lt;/strong&gt; and &lt;strong&gt;tidyr&lt;/strong&gt; cheat sheet&lt;/a&gt; for examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;changing-colors-shapes-and-sizes-with-scale_&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Changing colors, shapes, and sizes, with &lt;code&gt;scale_*()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Recall from session 3 that the grammar of graphics uses a set of layers to define elements of plots:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/slides/img/03/ggplot-layers@4x.png&#34; width=&#34;50%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In tomorrow’s session, you’ll learn all about the Theme layer. Here we’ll briefly cover the Scales layer, which we use for changing aspects of the different aesthetics, like using logged axes or changing colors or shapes.&lt;/p&gt;
&lt;p&gt;All the functions that deal with scales conveniently follow the same naming pattern:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;scale_&lt;span style=&#39;background-color:pink&#39;&gt;AESTHETIC&lt;/span&gt;_&lt;span style=&#39;background-color:yellow&#39;&gt;DETAILS&lt;/span&gt;()&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are some common scale functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;language-r&#39;&gt;&lt;code&gt;scale_&lt;span style=&#39;background-color:pink&#39;&gt;x&lt;/span&gt;_&lt;span style=&#39;background-color:yellow&#39;&gt;continuous&lt;/span&gt;()&lt;br&gt;scale_&lt;span style=&#39;background-color:pink&#39;&gt;y&lt;/span&gt;_&lt;span style=&#39;background-color:yellow&#39;&gt;reverse&lt;/span&gt;()&lt;br&gt;scale_&lt;span style=&#39;background-color:pink&#39;&gt;color&lt;/span&gt;_&lt;span style=&#39;background-color:yellow&#39;&gt;viridis_c&lt;/span&gt;()&lt;br&gt;scale_&lt;span style=&#39;background-color:pink&#39;&gt;shape&lt;/span&gt;_&lt;span style=&#39;background-color:yellow&#39;&gt;manual&lt;/span&gt;(values = c(19, 13, 15))&lt;br&gt;scale_&lt;span style=&#39;background-color:pink&#39;&gt;fill&lt;/span&gt;_&lt;span style=&#39;background-color:yellow&#39;&gt;manual&lt;/span&gt;(values = c(&#34;red&#34;, &#34;orange&#34;, &#34;blue&#34;))&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see a &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/index.html#section-scales&#34;&gt;list of all of the possible scale functions here&lt;/a&gt;, and you should reference that documentation (and the excellent examples) often when working with these functions.&lt;/p&gt;
&lt;p&gt;As long as you have mapped a variable to an aesthetic with &lt;code&gt;aes()&lt;/code&gt;, you can use the &lt;code&gt;scale_*()&lt;/code&gt; functions to deal with it. For instance, in this ggplot, we have mapped variables to &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;fill&lt;/code&gt;, which means we can use those corresponding scale functions to manipulate how those aesthetics are shown. Here we reverse the y-axis (ew, don’t really do this), and we use a discrete viridis color palette:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;continent_counts &amp;lt;- gapminder %&amp;gt;% 
  group_by(continent) %&amp;gt;% 
  summarize(countries = n_distinct(country))

ggplot(continent_counts, aes(x = continent, y = countries, fill = continent)) +
  geom_col() +
  scale_y_reverse() +  # lol this is bad; don&amp;#39;t do it in real life
  scale_fill_viridis_d()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/04-lesson_files/figure-html/plot-continent-counts-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also use different arguments in the scale functions—again, check the documentation for examples. For instance, if we want to use the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/scale_viridis.html&#34;&gt;plasma palette from the viridis package&lt;/a&gt;, we can set that as an option:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(continent_counts, aes(x = continent, y = countries, fill = continent)) +
  geom_col() +
  scale_fill_viridis_d(option = &amp;quot;plasma&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/04-lesson_files/figure-html/plot-continent-plasma-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That yellow might be too bright and hard to see, so we can tell ggplot to not use the full range of the palette, ending at 90% of the range instead:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(continent_counts, aes(x = continent, y = countries, fill = continent)) +
  geom_col() +
  scale_fill_viridis_d(option = &amp;quot;plasma&amp;quot;, end = 0.9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/04-lesson_files/figure-html/plot-continent-plasma-9-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Instead of letting R calculate the colors from a general palette, you can also specify your own colors with &lt;code&gt;scale_fill_manual()&lt;/code&gt; and feeding it a list of values—generally as &lt;a href=&#34;https://www.google.com/search?q=color+picker&#34;&gt;hex codes&lt;/a&gt; or a name from a &lt;a href=&#34;http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf&#34;&gt;list of built-in R colors&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(continent_counts, aes(x = continent, y = countries, fill = continent)) +
  geom_col() +
  scale_fill_manual(values = c(&amp;quot;chartreuse4&amp;quot;, &amp;quot;cornsilk4&amp;quot;, &amp;quot;black&amp;quot;, &amp;quot;#fc03b6&amp;quot;, &amp;quot;#5c47d6&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/04-lesson_files/figure-html/plot-continent-manual-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Scale functions also work for other aesthetics like &lt;code&gt;shape&lt;/code&gt; or &lt;code&gt;color&lt;/code&gt; or &lt;code&gt;size&lt;/code&gt;. For instance, consider this plot, which has all three:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gapminder_2007 &amp;lt;- gapminder %&amp;gt;% 
  filter(year == 2007)

ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/04-lesson_files/figure-html/plot-health-wealth-basic-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can change the colors of the points with &lt;code&gt;scale_color_*()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_manual(values = c(&amp;quot;chartreuse4&amp;quot;, &amp;quot;cornsilk4&amp;quot;, &amp;quot;black&amp;quot;, &amp;quot;#fc03b6&amp;quot;, &amp;quot;#5c47d6&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/04-lesson_files/figure-html/plot-health-wealth-colors-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can change the shapes with &lt;code&gt;scale_shape_*()&lt;/code&gt;. If you run &lt;code&gt;?pch&lt;/code&gt; in your console or search for &lt;code&gt;pch&lt;/code&gt; in the help, you can see all the possible shapes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_shape_manual(values = c(12, 9, 17, 19, 15))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/04-lesson_files/figure-html/plot-health-wealth-shapes-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can change the size with &lt;code&gt;scale_size_*()&lt;/code&gt;. Here we make it so the smallest possible size is 1 and the largest is 15:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_size_continuous(range = c(1, 15))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/04-lesson_files/figure-html/plot-health-wealth-size-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can even do all three at once:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_manual(values = c(&amp;quot;chartreuse4&amp;quot;, &amp;quot;cornsilk4&amp;quot;, &amp;quot;black&amp;quot;, &amp;quot;#fc03b6&amp;quot;, &amp;quot;#5c47d6&amp;quot;)) +
  scale_shape_manual(values = c(12, 9, 17, 19, 15)) +
  scale_size_continuous(range = c(1, 15))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/04-lesson_files/figure-html/plot-health-wealth-everything-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Phew. That’s ugly.&lt;/p&gt;
&lt;p&gt;One last thing we can do with scales is format how they show up on the plot. Notice how the population legend uses scientific notation like &lt;code&gt;2.50e+08&lt;/code&gt;. This means you need to move the decimal point 8 places to the right, making it &lt;code&gt;250000000&lt;/code&gt;. Leaving it in scientific notation isn’t great because it makes it really hard to read and interpret.&lt;/p&gt;
&lt;p&gt;If you load the &lt;strong&gt;scales&lt;/strong&gt; library (which is installed as part of &lt;strong&gt;tidyverse&lt;/strong&gt; but isn’t automatically loaded), you can use some neat helper functions to reformat the text that shows up in plots. For instance, we can make it so population is formatted as a number with commas every 3 numbers, and the x-axis is formatted as dollars:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(scales)

ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10(labels = dollar) +
  scale_size_continuous(labels = comma)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/04-lesson_files/figure-html/plot-health-wealth-scale-labels-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://scales.r-lib.org/reference/index.html&#34;&gt;Check the documentation for &lt;strong&gt;scales&lt;/strong&gt;&lt;/a&gt; for details about all the labelling functions it has, including dates, percentages, p-values, LaTeX math, etc.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Unzipping files</title>
      <link>https://uvaDS8104.github.io/resource/unzipping/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/resource/unzipping/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Because RStudio projects typically consist of multiple files (R scripts, datasets, graphical output, etc.) the easiest way to distribute them to you for examples, assignments, and projects is to combine all the different files in to a single compressed collection called a &lt;strong&gt;zip file&lt;/strong&gt;. When you unzip a zipped file, your operating system extracts all the files that are contained inside into a new folder on your computer.&lt;/p&gt;
&lt;p&gt;Unzipping files on macOS is trivial, but unzipping files on Windows can mess you up if you don’t pay careful attention. Here’s a helpful guide to unzipping files on both macOS and Windows.&lt;/p&gt;
&lt;div id=&#34;unzipping-files-on-macos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unzipping files on macOS&lt;/h2&gt;
&lt;p&gt;Double click on the downloaded &lt;code&gt;.zip&lt;/code&gt; file. macOS will automatically create a new folder with the same name as the &lt;code&gt;.zip&lt;/code&gt; file, and all the file’s contents will be inside. Double click on the RStudio Project file (&lt;code&gt;.Rproj&lt;/code&gt;) to get started.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/unzipping/unzip-mac.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;unzipping-files-on-windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unzipping files on Windows&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Right click on the &lt;code&gt;.zip&lt;/code&gt; file, select “Extract All…”, and work with the resulting unzipped folder.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unlike macOS, Windows does &lt;em&gt;not&lt;/em&gt; automatically unzip things for you. If you double click on the &lt;code&gt;.zip&lt;/code&gt; file, Windows will show you what’s inside, but it will do so without actually extracting anything. This &lt;del&gt;can be&lt;/del&gt; is incredibly confusing! Here’s what it looks like—the only clues that this folder is really a &lt;code&gt;.zip&lt;/code&gt; file are that there’s a “Compressed Folder Tools” tab at the top, and there’s a “Ratio” column that shows how much each file is compressed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/unzipping/inside-zip-windows.png&#34; width=&#34;80%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is very tempting to try to open files from this view. However, if you do, things will break and you won’t be able to correctly work with any of the files in the zipped folder. If you open the R Project file, for instance, RStudio will point to a bizarre working directory buried deep in some temporary folder:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/unzipping/temp-wd-windows.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You most likely won’t be able to open any data files or save anything, which will be frustrating.&lt;/p&gt;
&lt;p&gt;Instead, you need to right click on the &lt;code&gt;.zip&lt;/code&gt; file and select “Extract All…”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/unzipping/extract-windows-1.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then choose where you want to unzip all the files and click on “Extract”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/unzipping/extract-windows-2.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You should then finally have a real folder with all the contents of the zipped file. Open the R Project file and RStudio will point to the correct working directory and everything will work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/unzipping/extract-windows-3.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data</title>
      <link>https://uvaDS8104.github.io/resource/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/resource/data/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There are a ton of places to find data related to public policy and administration (as well as data on pretty much any topic you want) online:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tinyletter.com/data-is-plural&#34;&gt;&lt;strong&gt;Data is Plural newsletter&lt;/strong&gt;&lt;/a&gt;: Jeremy Singer-Vine sends a weekly newsletter of the most interesting public datasets he’s found. You should subscribe to it. &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk/edit#gid=0&#34;&gt;He also has an archive of all the datasets he’s highlighted.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://toolbox.google.com/datasetsearch&#34;&gt;&lt;strong&gt;Google Dataset Search&lt;/strong&gt;&lt;/a&gt;: Google indexes thousands of public datasets; search for them here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.kaggle.com/datasets&#34;&gt;&lt;strong&gt;Kaggle&lt;/strong&gt;&lt;/a&gt;: Kaggle hosts machine learning competitions where people compete to create the fastest, most efficient, most predictive algorithms. A byproduct of these competitions is a host of fascinating datasets that are generally free and open to the public. See, for example, &lt;a href=&#34;https://www.kaggle.com/hugomathien/soccer&#34;&gt;the European Soccer Database&lt;/a&gt;, the &lt;a href=&#34;https://www.kaggle.com/rtatman/salem-witchcraft-dataset&#34;&gt;Salem Witchcraft Dataset&lt;/a&gt; or results from an &lt;a href=&#34;https://www.kaggle.com/rtatman/oreo-flavors-tastetest-ratings&#34;&gt;Oreo flavors taste test&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.threesixtygiving.org/data/data-registry/&#34;&gt;&lt;strong&gt;360Giving&lt;/strong&gt;&lt;/a&gt;: Dozens of British foundations follow a standard file format for sharing grant data and have made that data available online.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://us-cities.survey.okfn.org/&#34;&gt;&lt;strong&gt;US City Open Data Census&lt;/strong&gt;&lt;/a&gt;: More than 100 US cities have committed to sharing dozens of types of data, including data about crime, budgets, campaign finance, lobbying, transit, and zoning. This site from the &lt;a href=&#34;http://sunlightfoundation.com/&#34;&gt;Sunlight Foundation&lt;/a&gt; and &lt;a href=&#34;http://www.codeforamerica.org//&#34;&gt;Code for America&lt;/a&gt; collects this data and rates cities by how well they’re doing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Political science and economics datasets&lt;/strong&gt;: There’s a wealth of data available for political science- and economics-related topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/briatte/srqm/wiki/Data&#34;&gt;&lt;strong&gt;François Briatte’s extensive curated lists&lt;/strong&gt;&lt;/a&gt;: Includes data from/about intergovernmental organizations (IGOs), nongovernmental organizations (NGOs), public opinion surveys, parliaments and legislatures, wars, human rights, elections, and municipalities.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/leeper/poliscitoys/issues/1&#34;&gt;&lt;strong&gt;Thomas Leeper’s list of political science datasets&lt;/strong&gt;&lt;/a&gt;: Good short list of useful datasets, divided by type of data (country-level data, survey data, social media data, event data, text data, etc.).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/erikgahner/PolData&#34;&gt;&lt;strong&gt;Erik Gahner’s list of political science datasets&lt;/strong&gt;&lt;/a&gt;: Huge list of useful datasets, divided by topic (governance, elections, policy, political elites, etc.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Themes</title>
      <link>https://uvaDS8104.github.io/lesson/05-lesson/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/05-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#complete-ggplot-themes&#34;&gt;Complete ggplot themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modifying-plot-elements-with-theme&#34;&gt;Modifying plot elements with &lt;code&gt;theme()&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#deal-with-general-plot-elements&#34;&gt;Deal with general plot elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#disable-elements-completely-with-element_blank&#34;&gt;Disable elements completely with &lt;code&gt;element_blank()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deal-with-borders-and-backgrounds-with-element_rect&#34;&gt;Deal with borders and backgrounds with &lt;code&gt;element_rect()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deal-with-lines-with-element_line&#34;&gt;Deal with lines with &lt;code&gt;element_line()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deal-with-text-with-element_text&#34;&gt;Deal with text with &lt;code&gt;element_text()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#important-note-about-ordering&#34;&gt;Important note about ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fonts&#34;&gt;Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reusing-themes&#34;&gt;Reusing themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#saving-plots&#34;&gt;Saving plots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;complete-ggplot-themes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Complete ggplot themes&lt;/h2&gt;
&lt;p&gt;There are many built-in complete themes that have a good combination of all the different &lt;code&gt;theme()&lt;/code&gt; options already set for you. By default, ggplot uses &lt;code&gt;theme_gray()&lt;/code&gt; (also spelled &lt;code&gt;theme_grey()&lt;/code&gt; for UK English; because the first developer of ggplot (Hadley Wickham) is from New Zealand, British spelling works throughout (e.g. you can use &lt;code&gt;colour&lt;/code&gt; instead of &lt;code&gt;color&lt;/code&gt;))&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Add &lt;code&gt;theme_minimal()&lt;/code&gt; to this plot:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-05-lesson-theme1&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_05-themes-1/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-05-lesson-theme1&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;Hopefully that was easy!&lt;/p&gt;
&lt;p&gt;If you look at &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/ggtheme.html&#34;&gt;the documentation for the different theme functions&lt;/a&gt;, you’ll notice that there are a few optional arguments, like &lt;code&gt;base_size&lt;/code&gt; and &lt;code&gt;base_family&lt;/code&gt;. The &lt;code&gt;base_size&lt;/code&gt; argument changes the base font size for the text in the plot, and it is 11 by default. Changing it to something like 20 will not make all the text in the plot be sized at 20—functions like &lt;code&gt;theme_minimal()&lt;/code&gt; set the size of plot elements based on the &lt;code&gt;base_size&lt;/code&gt;. For instance, in &lt;code&gt;theme_minimal()&lt;/code&gt;, the plot title is set to be 120% of &lt;code&gt;base_size&lt;/code&gt;, while the caption is 80%. Changing &lt;code&gt;base_size&lt;/code&gt; will resize all the different elements accordingly.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Modify this plot to use &lt;code&gt;theme_minimal()&lt;/code&gt; with a base size of 16:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-05-lesson-theme2&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_05-themes-2/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-05-lesson-theme2&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;Hopefully that was also fairly straightforward!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modifying-plot-elements-with-theme&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Modifying plot elements with &lt;code&gt;theme()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Using a complete theme like &lt;code&gt;theme_minimal()&lt;/code&gt; or &lt;code&gt;theme_bw()&lt;/code&gt; is a great starting point for getting a nice, clean, well designed plot. You’ll often need to make adjustments to smaller, more specific parts of the plot though. To do this, you can use the &lt;code&gt;theme()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;theme()&lt;/code&gt; is a massive function and has perhaps the most possible arguments of any function in R. It is impossible to remember everything it can possibly do. Fortunately its documentation is incredible. Run &lt;code&gt;?theme&lt;/code&gt; in your R console to see the help page, or &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/theme.html&#34;&gt;go to this page online&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;deal-with-general-plot-elements&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Deal with general plot elements&lt;/h3&gt;
&lt;p&gt;A few arguments to &lt;code&gt;theme()&lt;/code&gt; don’t use any special function—you can just specify settings with text like &lt;code&gt;&#34;bottom&#34;&lt;/code&gt; or &lt;code&gt;&#34;right&#34;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Look at the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/theme.html&#34;&gt;documentation for &lt;code&gt;theme()&lt;/code&gt; online&lt;/a&gt;. Make this plot’s legend appear on the bottom instead of the left.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-05-lesson-theme3&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_05-themes-3/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-05-lesson-theme3&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;div id=&#34;disable-elements-completely-with-element_blank&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Disable elements completely with &lt;code&gt;element_blank()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Any plot element can be disabled by using &lt;code&gt;element_blank()&lt;/code&gt;. For instance, if you want to remove the axis ticks, you can use &lt;code&gt;theme(axis.ticks = element_blank())&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Look at the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/theme.html&#34;&gt;documentation for &lt;code&gt;theme()&lt;/code&gt; online&lt;/a&gt;. Disable the panel grid in this plot.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-05-lesson-theme4&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_05-themes-4/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-05-lesson-theme4&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;You can also target more specific plot elements. You can specify something like &lt;code&gt;axis.text&lt;/code&gt;, which applies to all axis text, or you can use &lt;code&gt;axis.text.y&lt;/code&gt; to only target the text on the y-axis.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Look at the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/theme.html&#34;&gt;documentation for &lt;code&gt;theme()&lt;/code&gt; online&lt;/a&gt;. Make the following changes to this plot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disable the major panel grid for the x-axis&lt;/li&gt;
&lt;li&gt;Disable the minor panel grid for the x-axis&lt;/li&gt;
&lt;li&gt;Disable the minor panel grid for the y-axis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should only have three horizontal lines for the grid.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-05-lesson-theme5&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_05-themes-5/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-05-lesson-theme5&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;p&gt;Almost every other plot element fits into one of three categories: a rectangle, a line, or text. Changing the settings on these elements requires specific functions that correspond to these categories.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;deal-with-borders-and-backgrounds-with-element_rect&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Deal with borders and backgrounds with &lt;code&gt;element_rect()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Things like the plot background or the panel background or the legend background are rectangles and can be manipulated with &lt;code&gt;element_rect()&lt;/code&gt;. If you want the legend box to be yellow with a thin black border, you would use &lt;code&gt;theme(legend.box.background = element_rect(fill = &#34;yellow&#34;, color = &#34;black&#34;, size = 1)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Look at the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/theme.html&#34;&gt;documentation for &lt;code&gt;theme()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/element.html&#34;&gt;documentation for &lt;code&gt;element()&lt;/code&gt;&lt;/a&gt; online. Make the following changes to this plot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fill the plot background with &lt;span style=&#34;color: #F2D8CE&#34;&gt;#F2D8CE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Fill the panel background with &lt;span style=&#34;color: #608BA6&#34;&gt;#608BA6&lt;/span&gt;, and make the border &lt;span style=&#34;color: #184759&#34;&gt;#184759&lt;/span&gt; with size = 5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will be a fairly ugly plot.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-05-lesson-theme6&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_05-themes-6/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-05-lesson-theme6&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;div id=&#34;deal-with-lines-with-element_line&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Deal with lines with &lt;code&gt;element_line()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Things like the panel grid, tick marks, and axis lines are all lines and can be manipulated with &lt;code&gt;element_line()&lt;/code&gt;. If you want the x-axis line to be a dotted orange like, you would use &lt;code&gt;theme(axis.line.x = element_line(color = &#34;orange&#34;, linetype = &#34;dotted&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Look at the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/theme.html&#34;&gt;documentation for &lt;code&gt;theme()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/element.html&#34;&gt;documentation for &lt;code&gt;element()&lt;/code&gt;&lt;/a&gt; online. Make the following changes to this plot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make the major panel gridlines blue and dashed with size = 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will also be a fairly ugly plot.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-05-lesson-theme7&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_05-themes-7/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-05-lesson-theme7&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;div id=&#34;deal-with-text-with-element_text&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Deal with text with &lt;code&gt;element_text()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Finally, anything with text can be manipulated with &lt;code&gt;element_text()&lt;/code&gt;, and you can specify all sorts of things, including font family (&lt;code&gt;family&lt;/code&gt;), font weight (&lt;code&gt;face&lt;/code&gt;), color (&lt;code&gt;color&lt;/code&gt;), horizontal justification (&lt;code&gt;hjust&lt;/code&gt;), angle (&lt;code&gt;angle&lt;/code&gt;), and a bunch of other options. If you want the x-axis text to be italicized and rotated at a 45º angle, you would use &lt;code&gt;theme(axis.text.x = element_text(face = &#34;italic&#34;, angle = 45))&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Look at the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/theme.html&#34;&gt;documentation for &lt;code&gt;theme()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/element.html&#34;&gt;documentation for &lt;code&gt;element()&lt;/code&gt;&lt;/a&gt; online. Make the following changes to this plot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make the y-axis text italic&lt;/li&gt;
&lt;li&gt;Make the plot title right aligned, bold, and colored with &lt;span style=&#34;color: #8C7811&#34;&gt;#8C7811&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Make the plot subtitle right aligned&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-05-lesson-theme8&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_05-themes-8/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-05-lesson-theme8&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;important-note-about-ordering&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Important note about ordering&lt;/h2&gt;
&lt;p&gt;Things like &lt;code&gt;theme_grey()&lt;/code&gt; or &lt;code&gt;theme_minimal()&lt;/code&gt; are really just collections of changes to &lt;code&gt;theme()&lt;/code&gt;, so the order is important when using a complete theme. If you do something like this to turn off the gridlines in the plot panel:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(...) +
  geom_point(...) +
  theme(panel.grid = element_blank()) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…you’ll still have panel gridlines! That’s because &lt;code&gt;theme_bw()&lt;/code&gt; turns them on, and you typed it after you turned it off. If you want to use both &lt;code&gt;theme_bw()&lt;/code&gt; and remove the gridlines, you need to make sure any theme adjustments come after &lt;code&gt;theme_bw()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(...) +
  geom_point(...) +
  theme_bw() +
  theme(panel.grid = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fonts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fonts&lt;/h2&gt;
&lt;p&gt;You can use &lt;code&gt;theme()&lt;/code&gt; to change the fonts as well, though sometimes it’s a little tricky to get R to see the fonts on your computer—especially if you use Windows. &lt;a href=&#34;https://www.andrewheiss.com/blog/2017/09/27/working-with-r-cairo-graphics-custom-fonts-and-ggplot/&#34;&gt;This detailed blog post&lt;/a&gt; explains how to work with custom fonts in ggplot and shows how to get it set up on Windows. It should Just Work™ on macOS.&lt;/p&gt;
&lt;p&gt;In short, as long as you load the fonts correctly, you can specify different fonts either in a complete theme like &lt;code&gt;theme_minimal(base_family = &#34;Comic Sans MS&#34;)&lt;/code&gt; or in &lt;code&gt;theme()&lt;/code&gt; like &lt;code&gt;theme(plot.title = element_text(family = &#34;Papyrus&#34;))&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reusing-themes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reusing themes&lt;/h2&gt;
&lt;p&gt;If you want to repeat specific theme settings throughout a document, you can save yourself a ton of typing by storing the results of &lt;code&gt;theme()&lt;/code&gt; to an object and reusing it. For instance, suppose you want your plots to be based on theme_minimal, have right aligned title and subtitle text, have the legend at the bottom, and have no minor gridlines. You can save all of that into an object named &lt;code&gt;my_neato_theme&lt;/code&gt; or something, and then reuse it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_neato_theme &amp;lt;- theme_minimal() +
  theme(plot.title = element_text(hjust = 1),
        plot.subtitle = element_text(hjust = 1),
        legend.position = &amp;quot;bottom&amp;quot;,
        panel.grid.minor = element_blank())

# Make one plot
ggplot(data = mpg,
       mapping = aes(x = displ, y = hwy, color = drv)) +
  geom_point(size = 3) +
  labs(title = &amp;quot;Engine displacement and highway MPG&amp;quot;,
       subtitle = &amp;quot;Heavier cars get worse mileage&amp;quot;) +
  my_neato_theme&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/05-lesson_files/figure-html/saved-theme-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make another plot
ggplot(data = mpg,
       mapping = aes(x = displ, y = hwy, color = cty)) +
  geom_point(size = 3) +
  labs(title = &amp;quot;Engine displacement and highway MPG&amp;quot;,
       subtitle = &amp;quot;Points colored by city MPG&amp;quot;) +
  my_neato_theme&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/05-lesson_files/figure-html/saved-theme-2.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;saving-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Saving plots&lt;/h2&gt;
&lt;p&gt;So far, all your plots have ended up either in RStudio or in a knitted HTML, Word, or PDF document. But what if you want to save just the plot to your computer so you can send it out to the world?! You could take a screenshot, but that won’t provide the highest resolution, and that will only save the plot as a bitmap-based PNG, not an infinitely resizable vector-based PDF!&lt;/p&gt;
&lt;p&gt;Fortunately it’s pretty easy to save a plot using the special &lt;code&gt;ggsave()&lt;/code&gt; function. You can specify whatever dimensions you want and whatever file type you want and save the standalone plot to your computer. You should look at the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/ggsave.html&#34;&gt;documentation for &lt;code&gt;ggsave()&lt;/code&gt;&lt;/a&gt; for complete details of all the different options and arguments it can take. Typically, you do something like this.&lt;/p&gt;
&lt;p&gt;First create a plot and store it as an object. We haven’t done that yet in this lesson—so far we’ve just run &lt;code&gt;ggplot()&lt;/code&gt; and seen the output immediately. If you save the output of &lt;code&gt;ggplot()&lt;/code&gt; to an object, you actually won’t see anything until you run the name of the object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a_cool_plot &amp;lt;- ggplot(data = mpg,
                      mapping = aes(x = displ, y = hwy, color = drv)) +
  geom_point(size = 3) +
  labs(title = &amp;quot;Engine displacement and highway MPG&amp;quot;,
       subtitle = &amp;quot;Heavier cars get worse mileage&amp;quot;)

# Make sure you run this so you can see the plot
a_cool_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/lesson/05-lesson_files/figure-html/ggsave-example-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next you can feed your saved plot to &lt;code&gt;ggsave()&lt;/code&gt; to save it. It will automatically determine how to save it based on the filename you provide. If you tell it to be &lt;code&gt;something.png&lt;/code&gt;, R will make a PNG; if you tell it to be &lt;code&gt;something.pdf&lt;/code&gt;, R will make a PDF, and so on. Common types are PDF, PNG, JPEG (ew though), SVG, TIFF, and others.&lt;/p&gt;
&lt;p&gt;You can also save the plot as multiple files. I typically make PNG and PDF versions of any plots I export like so:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = &amp;quot;a_cool_plot.pdf&amp;quot;, plot = a_cool_plot,
       width = 6, height = 4.5, units = &amp;quot;in&amp;quot;)

ggsave(filename = &amp;quot;a_cool_plot.png&amp;quot;, plot = a_cool_plot,
       width = 6, height = 4.5, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From a file management perspective, it often makes sense to store all your output in a separate folder in your project, like &lt;code&gt;output&lt;/code&gt; or &lt;code&gt;figures&lt;/code&gt; or something. If you want to put saved images in a subfolder, include the name in the file name:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = &amp;quot;figures/a_cool_plot.png&amp;quot;, plot = a_cool_plot,
       width = 6, height = 4.5, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, if you’re using custom fonts, you need to add one bit of wizardry to get the fonts to embed correctly in PDFs. This is something you just have to memorize or copy and paste a lot—if you want to know the full details, &lt;a href=&#34;https://www.andrewheiss.com/blog/2017/09/27/working-with-r-cairo-graphics-custom-fonts-and-ggplot/&#34;&gt;see this blog post&lt;/a&gt;. In short, R’s default PDF writer doesn’t know how to embed fonts and will panic if you make it try. R can use a different PDF-writing engine named Cairo that embeds fonts just fine, though, so you need to tell &lt;code&gt;ggsave()&lt;/code&gt; to use it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = &amp;quot;figures/a_cool_plot.pdf&amp;quot;, plot = a_cool_plot,
       width = 6, height = 4.5, units = &amp;quot;in&amp;quot;, device = cairo_pdf)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Citations and bibliography</title>
      <link>https://uvaDS8104.github.io/resource/citations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/resource/citations/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;You can &lt;a href=&#34;https://uvaDS8104.github.io/bib/references.bib&#34;&gt;download a BibTeX file&lt;/a&gt; of all the non-web-based readings in the course:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/bib/references.bib&#34;&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; &lt;code&gt;references.bib&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can open the file in &lt;a href=&#34;http://bibdesk.sourceforge.net/&#34;&gt;BibDesk on macOS&lt;/a&gt;, &lt;a href=&#34;http://www.jabref.org/&#34;&gt;JabRef on Windows&lt;/a&gt;, or &lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; or &lt;a href=&#34;https://www.mendeley.com/&#34;&gt;Mendeley&lt;/a&gt; online.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Uncertainty</title>
      <link>https://uvaDS8104.github.io/lesson/06-lesson/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/06-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#histograms&#34;&gt;Histograms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#density-plots&#34;&gt;Density plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boxes-violins-and-dots&#34;&gt;Boxes, violins, and dots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Throughout this lesson, you’ll use the built-in &lt;code&gt;mpg&lt;/code&gt; dataset to make histograms, density plots, box plots, violin plots, and other graphics that show uncertainty.&lt;/p&gt;
&lt;p&gt;Sorry if &lt;code&gt;mpg&lt;/code&gt; is getting repetitive! For short interactive things like this, it’s easier to use built-in and easy-to-load datasets like &lt;code&gt;mpg&lt;/code&gt; and &lt;code&gt;gapminder&lt;/code&gt; instead of loading CSV files, hence our constant reuse of the dataset. This is fairly normal too—the majority of examples in R help pages (and in peoples’ blog posts) use things like &lt;code&gt;mpg&lt;/code&gt; or&lt;code&gt;gapminder&lt;/code&gt;, or even &lt;code&gt;iris&lt;/code&gt;, which measures the lengths and widths of a bunch of iris flowers in the 1930s (fun fact! I don’t like using &lt;code&gt;iris&lt;/code&gt; because the data was originally used in an article in the &lt;em&gt;Annals of Eugenics&lt;/em&gt; (😬) in 1936, and the data was collected to advance eugenics, and &lt;a href=&#34;https://armchairecology.blog/iris-dataset/&#34;&gt;there’s no good reason to use data like that in 2020&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;So we work with cars instead of racist flower data.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;mpg&lt;/code&gt; dataset is available in R as soon as you load ggplot2 (or tidyverse). Yu don’t have to run &lt;code&gt;read_csv()&lt;/code&gt; or anything—it’s just there in the background already.&lt;/p&gt;
&lt;p&gt;As a reminder, here are the first few rows of the &lt;code&gt;mpg&lt;/code&gt; dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 11
##   manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class 
##   &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; 
## 1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…
## 2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…
## 3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…
## 4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…
## 5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…
## 6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p     compa…&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;histograms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Histograms&lt;/h2&gt;
&lt;p&gt;When working with histograms, you &lt;em&gt;always&lt;/em&gt; need to think about the bin width. Histograms calculate the counts of rows within specific ranges of data, and the shape of the histogram will change depending on how wide or narrow these ranges (or bins, or buckets) are.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Change this code to add a specific bin width for city miles per gallon &lt;code&gt;cty&lt;/code&gt; (hint: &lt;code&gt;binwidth&lt;/code&gt;). Play around with different widths until you find one that represents the data well.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-06-lesson-uncertainty1&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_06-uncertainty-1/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-06-lesson-uncertainty1&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;By default, histograms are filled with a dark grey color and the bars have no borders. Additionally, R places the center of the bars at specific numbers: if you have a bin width of 5, for instance, a bar will show the range from 7.5 to 12.5 instead of 5-10 or 10-15.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Do the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Add a specific bin width&lt;/li&gt;
&lt;li&gt;Add a white border (hint: &lt;code&gt;color&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Fill with &lt;span style=&#34;color: #E16462&#34;&gt;#E16462&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Make it so the bars start at whole numbers like 10 or 20 (hint: &lt;code&gt;boundary&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-06-lesson-uncertainty2&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_06-uncertainty-2/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-06-lesson-uncertainty2&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;You can add extra aesthetics to encode additional information about the distribution of variables across categories.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Make a histogram of &lt;code&gt;cty&lt;/code&gt; and fill by &lt;code&gt;drv&lt;/code&gt; (drive: front, rear, and 4-wheel). Make sure you specify a good bin width.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-06-lesson-uncertainty3&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_06-uncertainty-3/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-06-lesson-uncertainty3&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;That’s too much information! Instead of only filling, you can separate the data into multiple plots.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Make a histogram of &lt;code&gt;cty&lt;/code&gt; fill &lt;em&gt;and&lt;/em&gt; facet by &lt;code&gt;drv&lt;/code&gt;. Make sure you specify a good bin width. Make sure you specify a good bin width.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-06-lesson-uncertainty4&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_06-uncertainty-4/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-06-lesson-uncertainty4&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;div id=&#34;density-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Density plots&lt;/h2&gt;
&lt;p&gt;When working with density plots &lt;em&gt;in this class&lt;/em&gt; you don’t need to worry too much about the calculus behind the scenes that creates the curves. But you can change those settings if you really want.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Do the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Fill this density plot with &lt;span style=&#34;color: #E16462&#34;&gt;#E16462&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Add a border (hint: &lt;code&gt;color&lt;/code&gt;) using &lt;span style=&#34;color: #9C3836&#34;&gt;#9C3836&lt;/span&gt;, with size = 1&lt;/li&gt;
&lt;li&gt;Change the bandwidth (hint: &lt;code&gt;bw&lt;/code&gt;) to 0.5, then 1, then 10&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-06-lesson-uncertainty5&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_06-uncertainty-5/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-06-lesson-uncertainty5&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;Like histograms, you can map other variables onto the plot. It’s often a good idea to make the curves semi-transparent so you can see the different distributions.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Do the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Fill this plot using the &lt;code&gt;drv&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;Make the density plots 50% transparent&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-06-lesson-uncertainty6&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_06-uncertainty-6/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-06-lesson-uncertainty6&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;Even with transparency, it’s often difficult to interpret density plots like this. As an alternative, you can use the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html&#34;&gt;&lt;strong&gt;ggridges&lt;/strong&gt; package&lt;/a&gt; to make ridge plots. Look at the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html&#34;&gt;documentation and examples for &lt;strong&gt;ggridges&lt;/strong&gt;&lt;/a&gt; for lots of details about different plots you can make.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Convert this plot into a ridge plot.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-06-lesson-uncertainty7&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_06-uncertainty-7/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-06-lesson-uncertainty7&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;div id=&#34;boxes-violins-and-dots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Boxes, violins, and dots&lt;/h2&gt;
&lt;p&gt;Finally, you can use things like boxplots and violin plots to show the distribution of variables, either by themselves or across categories.&lt;/p&gt;
&lt;p&gt;Box plots show the distribution of a variable by highlighting specific details, like the 25th, 50th (median) and 75th percentile, as well as the assumed minimum, assumed maximum, and outliers:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://uvaDS8104.github.io/slides/06-slides_files/figure-html/boxplot-explanation-1.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Anatomy of a boxplot&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When making boxplots with ggplot, you need to map the variable of interest to the &lt;code&gt;x&lt;/code&gt; aesthetic (or &lt;code&gt;y&lt;/code&gt; if you want a vertical boxplot), and you can optionally map a second categorical variable to the &lt;code&gt;y&lt;/code&gt; aesthetic (or &lt;code&gt;x&lt;/code&gt; if you want a vertical boxplot).&lt;/p&gt;
&lt;p&gt;You can adjust the fill and color of the plot, and you can change what counts as outliers with the &lt;code&gt;coef&lt;/code&gt; argument. By default outliers are any point that is beyond the 75th percentile + 1.5 × the interquartile range (or below the 25th percentile + 1.5 × IQR), but that’s adjustable.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Do the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Fill the boxplot with &lt;span style=&#34;color: #E6AD3C&#34;&gt;#E6AD3C&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Color the boxplot with &lt;span style=&#34;color: #5ABD51&#34;&gt;#5ABD51&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Change the definition of outliers to be 5 times the IQR&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-06-lesson-uncertainty8&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_06-uncertainty-8/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-06-lesson-uncertainty8&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;You can also use violin plots instead of boxplot, which show the mirrored density distribution. When doing this, it’s often helpful to add other geoms like jittered points to show more of the data&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Do the following&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Change this boxplot to use violins instead&lt;/li&gt;
&lt;li&gt;Add jittered points with a jittering width of 0.1 and sized at 0.5&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-06-lesson-uncertainty9&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_06-uncertainty-9/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-06-lesson-uncertainty9&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Relationships</title>
      <link>https://uvaDS8104.github.io/lesson/07-lesson/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/07-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There isn’t really a lesson for today, and as we get further into the semester, the need for lessons will continue to decrease. Now that each section is focused on a few specific geoms and how to apply them, you don’t need to go through interactive tutorials so much, since you should (hopefully!) be getting the hang of how ggplot works. (IF NOT, please reach out for help on Slack or via e-mail! I’m more than happy and ready to help!)&lt;/p&gt;
&lt;p&gt;For the lesson, &lt;a href=&#34;https://uvaDS8104.github.io/example/07-example/&#34;&gt;read through the code examples in the example&lt;/a&gt; to see how to make dual y-axes, scatterplot matrices, coefficient plots, and marginal effects plots.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparisons</title>
      <link>https://uvaDS8104.github.io/lesson/08-lesson/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/08-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Like yesterday, there isn’t really a lesson today. You’re not learning how to use any new functions—you’re learning how to apply the geoms you already know in cool and exciting ways. But don’t worry! You’ll have a lesson for session 9!&lt;/p&gt;
&lt;p&gt;For the lesson, &lt;a href=&#34;https://uvaDS8104.github.io/example/08-example/&#34;&gt;read through the code examples in the example&lt;/a&gt; to see how to make small multiples, sparklines, geofacets, and slopegraphs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Annotations</title>
      <link>https://uvaDS8104.github.io/lesson/09-lesson/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/09-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Ha, so in the video I said there would be interactive lessons, but &lt;em&gt;I changed my mind!&lt;/em&gt; You’re only working with a few new functions this session (&lt;code&gt;annotate()&lt;/code&gt;, &lt;code&gt;geom_text()&lt;/code&gt;, &lt;code&gt;geom_label()&lt;/code&gt;, &lt;code&gt;geom_text_repel()&lt;/code&gt;, and &lt;code&gt;geom_label_repel()&lt;/code&gt;), and the best way to figure out how to use them is to use them!&lt;/p&gt;
&lt;p&gt;There are some helpful blog posts and other resources online with examples and explanations. Read through these in addition to the documentation for &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/annotate.html&#34;&gt;&lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/geom_text.html&#34;&gt;&lt;code&gt;geom_text()/geom_label()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;&#34;&gt;&lt;strong&gt;ggrepel&lt;/strong&gt;&lt;/a&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.r-graph-gallery.com/233-add-annotations-on-ggplot2-chart.html&#34;&gt;“Add shapes with &lt;code&gt;annotate()&lt;/code&gt;”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&#34;fas fa-external-link-square-alt&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://ggplot2-book.org/annotations.html&#34;&gt;“Annotations”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Interactivity</title>
      <link>https://uvaDS8104.github.io/lesson/10-lesson/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/10-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Again, there’s no lesson for this. The only way to learn how to use &lt;code&gt;ggplotly()&lt;/code&gt; and create dashboards with &lt;strong&gt;flexdashboard&lt;/strong&gt; is to try them out in RStudio, not in a mini browser-based R session here.&lt;/p&gt;
&lt;p&gt;So &lt;a href=&#34;https://uvaDS8104.github.io/assignment/10-exercise/&#34;&gt;head over to the exercise&lt;/a&gt; to get started!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time</title>
      <link>https://uvaDS8104.github.io/lesson/11-lesson/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/11-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Once again, there’s no lesson this time. You’re all understanding the basics of R and ggplot and dplyr &lt;em&gt;really well&lt;/em&gt; (I’m seriously so impressed and proud of you all!).&lt;/p&gt;
&lt;p&gt;In your exercise today you’ll visualize trends in time using one of three different real-world datasets. &lt;a href=&#34;https://uvaDS8104.github.io/example/11-example/&#34;&gt;In the example&lt;/a&gt; I demonstrate how to remove seasonality from time series data, which is a useful skill, but &lt;em&gt;not always applicable&lt;/em&gt; to every time series dataset. If there’s no seasonality in your data, you don’t need to remove it.&lt;/p&gt;
&lt;p&gt;So head over to &lt;a href=&#34;https://uvaDS8104.github.io/example/11-example/&#34;&gt;the example&lt;/a&gt; or &lt;a href=&#34;https://uvaDS8104.github.io/assignment/11-exercise/&#34;&gt;the exercise&lt;/a&gt; to get started!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Space</title>
      <link>https://uvaDS8104.github.io/lesson/12-lesson/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/12-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#combining-datasets-vertically&#34;&gt;Combining datasets vertically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combining-datasets-horizontally&#34;&gt;Combining datasets horizontally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#inner_join&#34;&gt;&lt;code&gt;inner_join()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#left_join&#34;&gt;&lt;code&gt;left_join()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#common-column-names&#34;&gt;Common column names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#right_join&#34;&gt;&lt;code&gt;right_join()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;There &lt;em&gt;is&lt;/em&gt; a short lesson today! You’ll learn the basics of joining two different datasets together, both vertically and horizontally.&lt;/p&gt;
&lt;p&gt;There are a few imaginary datasets I’ve created for you to play with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##      id some_variable
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        
## 1     1 x1           
## 2     2 x2           
## 3     3 x3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##      id some_other_variable
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;              
## 1     1 y1                 
## 2     2 y2                 
## 3     4 y4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 5
##   state  year unemployment inflation population
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 GA     2018          5         2          100
## 2 GA     2019          5.3       1.8        200
## 3 GA     2020          5.2       2.5        300
## 4 NC     2018          6.1       1.8        350
## 5 NC     2019          5.9       1.6        375
## 6 NC     2020          5.3       1.8        400
## 7 CO     2018          4.7       2.7        200
## 8 CO     2019          4.4       2.6        300
## 9 CO     2020          5.1       2.5        400&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_data_2019&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   state unemployment inflation population
##   &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 GA             5.3       1.8        200
## 2 NC             5.9       1.6        375
## 3 CO             4.4       2.6        300&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_libraries&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   state  year libraries schools
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 CO     2018       230     470
## 2 CO     2019       240     440
## 3 CO     2020       270     510
## 4 NC     2018       200     610
## 5 NC     2019       210     590
## 6 NC     2020       220     530&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_libraries_2019&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   state libraries schools
##   &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 CO          240     440
## 2 NC          210     590&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;puerto_rico_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   state unemployment population  year
##   &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 PR             3.1        150  2018
## 2 PR             3.2        250  2019
## 3 PR             3.3        350  2020&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;state_regions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 51 x 2
##    region    state
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;
##  1 West      AK   
##  2 South     AL   
##  3 South     AR   
##  4 West      AZ   
##  5 West      CA   
##  6 West      CO   
##  7 Northeast CT   
##  8 South     DC   
##  9 South     DE   
## 10 South     FL   
## # … with 41 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;combining-datasets-vertically&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Combining datasets vertically&lt;/h2&gt;
&lt;p&gt;Recall from the &lt;a href=&#34;https://uvaDS8104.github.io/assignment/03-exercise/&#34;&gt;Lord of the Rings data in exercise 3&lt;/a&gt; that you had to combine three different CSV files into dataset. You used &lt;code&gt;bind_rows()&lt;/code&gt; to stack each of these on top of each other.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lotr &amp;lt;- bind_rows(fellowship, tt, rotk)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That worked well because each of the individual data frames had the same columns in them, and R was able to line up the matching columns. If columns were missing, R would have placed &lt;code&gt;NA&lt;/code&gt; in the appropriate locations.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Combine &lt;code&gt;national_data&lt;/code&gt; and &lt;code&gt;puerto_rico_data&lt;/code&gt; into a single dataset named &lt;code&gt;us_data&lt;/code&gt; using &lt;code&gt;bind_rows&lt;/code&gt;. Pay attention to what happens with the inflation column. Also notice that the columns in the Puerto Rico data are in a different order.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-12-lesson-joining1&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_12-joining-1/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-12-lesson-joining1&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;div id=&#34;combining-datasets-horizontally&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Combining datasets horizontally&lt;/h2&gt;
&lt;p&gt;Binding rows vertically is the easiest way to combine two datasets, but most often you won’t be doing that. You’ll only do this if you’re combining datasets that come from the same source, like if a state offers separate CSV files of the same data for each county.&lt;/p&gt;
&lt;p&gt;In most cases, though, you’ll need to combine completely different datasets, bringing one or more columns from one into another. With vertical combining, R needs column names with the same names in order to figure out where the data lines up. With horizontal combining, R needs values inside one or more columns to be the same in order to figure out where the data lines up.&lt;/p&gt;
&lt;p&gt;There is technically a function named &lt;code&gt;bind_cols()&lt;/code&gt;, but you’ll rarely want to use it. It doesn’t attempt to match any rows—it just glues two datasets together:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bind_cols(national_data, 
          # Repeat PR 3 times so that it has the same number of rows as national_data
          bind_rows(puerto_rico_data, puerto_rico_data, puerto_rico_data))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 9
##   state  year unemployment inflation population state1 unemployment1 population1
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1 GA     2018          5         2          100 PR               3.1         150
## 2 GA     2019          5.3       1.8        200 PR               3.2         250
## 3 GA     2020          5.2       2.5        300 PR               3.3         350
## 4 NC     2018          6.1       1.8        350 PR               3.1         150
## 5 NC     2019          5.9       1.6        375 PR               3.2         250
## 6 NC     2020          5.3       1.8        400 PR               3.3         350
## 7 CO     2018          4.7       2.7        200 PR               3.1         150
## 8 CO     2019          4.4       2.6        300 PR               3.2         250
## 9 CO     2020          5.1       2.5        400 PR               3.3         350
## # … with 1 more variable: year1 &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s… not great.&lt;/p&gt;
&lt;p&gt;Instead, we need to use a function that is more careful about bringing in data. Fortunately there are a few good options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inner_join()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left_join()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right_join()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;most&lt;/strong&gt; helpful way of understanding these different functions &lt;a href=&#34;https://github.com/gadenbuie/tidyexplain#mutating-joins&#34;&gt;is to go here and stare at the animations for a little while&lt;/a&gt; to see which pieces of which dataset go where. (There are lots of others, like &lt;code&gt;full_join()&lt;/code&gt;, &lt;code&gt;semi_join()&lt;/code&gt;, and &lt;code&gt;anti_join()&lt;/code&gt;, and they have helpful animations, but I rarely use those.)&lt;/p&gt;
&lt;p&gt;For each of these functions, &lt;strong&gt;you need at least one common ID column in both datasets&lt;/strong&gt; in order for R to know where things line up.&lt;/p&gt;
&lt;p&gt;Let’s practice how these all work and see what the differences between them are.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;inner_join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;inner_join()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;First, &lt;a href=&#34;https://github.com/gadenbuie/tidyexplain#inner-join&#34; target=&#34;_blank&#34;&gt;go to this page in a new tab&lt;/a&gt; and stare at the mesmerizing animation.&lt;/p&gt;
&lt;p&gt;Let’s look at two datasets, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##      id some_variable
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        
## 1     1 x1           
## 2     2 x2           
## 3     3 x3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##      id some_other_variable
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;              
## 1     1 y1                 
## 2     2 y2                 
## 3     4 y4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both datasets have an &lt;code&gt;id&lt;/code&gt; column that is the same across each (though the values aren’t necessarily the same). Because there’s a shared column, we can join these two based on that column.&lt;/p&gt;
&lt;p&gt;If we use &lt;code&gt;inner_join()&lt;/code&gt;, the resulting dataset will only keep the rows from the first where there are matching values from the second:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inner_join(x, y, by = &amp;quot;id&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##      id some_variable some_other_variable
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;              
## 1     1 x1            y1                 
## 2     2 x2            y2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how it got rid of the row with &lt;code&gt;id = 3&lt;/code&gt; from the first and the row with &lt;code&gt;id = 4&lt;/code&gt; from the second.&lt;/p&gt;
&lt;p&gt;You can also write this with pipes, which is really common when working with &lt;strong&gt;dplyr&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x %&amp;gt;% 
  inner_join(y, by = &amp;quot;id&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##      id some_variable some_other_variable
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;              
## 1     1 x1            y1                 
## 2     2 x2            y2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say we have two datasets: &lt;code&gt;national_data_2019&lt;/code&gt; and &lt;code&gt;national_libraries_2019&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_data_2019&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   state unemployment inflation population
##   &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 GA             5.3       1.8        200
## 2 NC             5.9       1.6        375
## 3 CO             4.4       2.6        300&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_libraries_2019&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   state libraries schools
##   &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 CO          240     440
## 2 NC          210     590&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to bring the libraries and schools columns into the general national data. Notice how both datasets have a state column.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Create a new dataset named &lt;code&gt;combined_data&lt;/code&gt; that uses &lt;code&gt;inner_join()&lt;/code&gt; to merge &lt;code&gt;national_data_2019&lt;/code&gt; and &lt;code&gt;national_libraries_2019&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-12-lesson-joining2&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_12-joining-2/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-12-lesson-joining2&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;/div&gt;
&lt;div id=&#34;left_join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;left_join()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Again, &lt;a href=&#34;https://github.com/gadenbuie/tidyexplain#left-join&#34; target=&#34;_blank&#34;&gt;go to this page in a new tab&lt;/a&gt; and stare at the animation.&lt;/p&gt;
&lt;p&gt;Left joining is less destructive than inner joining. With left joining, any rows in the first dataset that don’t have matches in the second &lt;em&gt;don’t&lt;/em&gt; get thrown away and instead are filled with &lt;code&gt;NA&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;left_join(x, y, by = &amp;quot;id&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##      id some_variable some_other_variable
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;              
## 1     1 x1            y1                 
## 2     2 x2            y2                 
## 3     3 x3            &amp;lt;NA&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the row with &lt;code&gt;id = 4&lt;/code&gt; from the second dataset is gone, but the row with &lt;code&gt;id = 3&lt;/code&gt; from the first is still there, with &lt;code&gt;NA&lt;/code&gt; for &lt;code&gt;some_other_variable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I find this much more useful when combining data. I often have a larger dataset with all the main variables I care about, perhaps with every combination of country and year over 20 years and 180 countries. If I find another dataset I want to join, and it has missing data for some of the years or countries, I don’t want the combined data to throw away all the rows from the main big dataset that don’t match! I still want those!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(&lt;a href=&#34;https://stats.andrewheiss.com/canary-ngos/01_get-merge-data.html#final_clean_combined_data&#34;&gt;Look at this for a real life example&lt;/a&gt;: I create a dataset I name &lt;code&gt;panel_skeleton&lt;/code&gt; that is just all the combinations of countries and years (Afghanistan 1990, Afghanistan 1991, etc.), and then I bring in all sorts of other datasets that match the same countries and years. When there aren’t matches, nothing in the skeleton gets thrown away—R just adds missing values instead.)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Create a new dataset named &lt;code&gt;combined_data&lt;/code&gt; that uses &lt;code&gt;left_join()&lt;/code&gt; to merge &lt;code&gt;national_data_2019&lt;/code&gt; and &lt;code&gt;national_libraries_2019&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-12-lesson-joining5&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_12-joining-5/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-12-lesson-joining5&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;Left joining is also often surprisingly helpful for recoding lots of variables. Right now in our fake national data, we have a column for state, but it would be nice if we could have a column for region so we could facet or fill or color by region in a plot. Hunting around on the internet, you find this dataset that has a column for state and a column for abbreviations:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;state_regions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 51 x 2
##    region    state
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;
##  1 West      AK   
##  2 South     AL   
##  3 South     AR   
##  4 West      AZ   
##  5 West      CA   
##  6 West      CO   
##  7 Northeast CT   
##  8 South     DC   
##  9 South     DE   
## 10 South     FL   
## # … with 41 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Create a new dataset named &lt;code&gt;national_data_with_region&lt;/code&gt; that uses &lt;code&gt;left_join()&lt;/code&gt; to combine &lt;code&gt;national_data_2019&lt;/code&gt; with &lt;code&gt;state_regions&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-12-lesson-joining3&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_12-joining-3/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-12-lesson-joining3&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;Because &lt;code&gt;left_join()&lt;/code&gt; only keeps rows from the second dataset that match the first, we don’t actually bring in all 50 rows from the &lt;code&gt;state_regions&lt;/code&gt; data—only the rows that match the first dataset (&lt;code&gt;national_data_2019&lt;/code&gt;) come over. We could have done with if some massive recoding (&lt;code&gt;mutate(region = ifelse(state == &#34;GA&#34; | state == &#34;NC&#34;, &#34;South&#34;, ifelse(state == &#34;CO&#34;), &#34;West&#34;, NA))&lt;/code&gt;), but that’s awful. Left joining is far easier here.&lt;/p&gt;
&lt;p&gt;You can also join by multiple columns. So far we’ve been working with just &lt;code&gt;national_data_2019&lt;/code&gt;, but if you look at &lt;code&gt;national_data&lt;/code&gt;, you’ll see there are rows for different years across these states:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 5
##   state  year unemployment inflation population
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 GA     2018          5         2          100
## 2 GA     2019          5.3       1.8        200
## 3 GA     2020          5.2       2.5        300
## 4 NC     2018          6.1       1.8        350
## 5 NC     2019          5.9       1.6        375
## 6 NC     2020          5.3       1.8        400
## 7 CO     2018          4.7       2.7        200
## 8 CO     2019          4.4       2.6        300
## 9 CO     2020          5.1       2.5        400&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Previously, we’ve been specifying the ID column with &lt;code&gt;by = &#34;state&#34;&lt;/code&gt;, but now we have two ID columns: &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;year&lt;/code&gt;. We can specify both with &lt;code&gt;by = c(&#34;state&#34;, &#34;year&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;&lt;strong&gt;Your turn&lt;/strong&gt;: Create a new dataset named &lt;code&gt;national_data_combined&lt;/code&gt; that uses &lt;code&gt;left_join()&lt;/code&gt; to combine &lt;code&gt;national_data&lt;/code&gt; with &lt;code&gt;national_libraries&lt;/code&gt; by state and year.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe style=&#34;margin:0 auto; min-width: 100%;&#34; id=&#34;learnr-12-lesson-joining4&#34; class=&#34;interactive&#34; src=&#34;https://andrewheiss.shinyapps.io/datavizm20_12-joining-4/&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; onload=&#39;iFrameResize({}, &#34;#learnr-12-lesson-joining4&#34;)&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;If one dataset has things like state and year, but another only has state, &lt;code&gt;left_join()&lt;/code&gt; will still work, but it will only join where the state is the same. For instance, here’s what happens when we join the region data to the yearly national data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_data_with_region &amp;lt;- national_data %&amp;gt;% 
  left_join(state_regions, by = &amp;quot;state&amp;quot;)
national_data_with_region&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 6
##   state  year unemployment inflation population region
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; 
## 1 GA     2018          5         2          100 South 
## 2 GA     2019          5.3       1.8        200 South 
## 3 GA     2020          5.2       2.5        300 South 
## 4 NC     2018          6.1       1.8        350 South 
## 5 NC     2019          5.9       1.6        375 South 
## 6 NC     2020          5.3       1.8        400 South 
## 7 CO     2018          4.7       2.7        200 West  
## 8 CO     2019          4.4       2.6        300 West  
## 9 CO     2020          5.1       2.5        400 West&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The “South” region gets added to every row where the state is “GA” and “NC”, even though those rows only appear once in &lt;code&gt;state_regions&lt;/code&gt;. &lt;code&gt;left_join()&lt;/code&gt; will still match all the values even if states are repeated. Magic!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;common-column-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Common column names&lt;/h2&gt;
&lt;p&gt;So far, the column names in both datasets have been the same, which has greatly simplified life. In fact, if the columns have the same name, we can technically leave out the &lt;code&gt;by&lt;/code&gt; argument and R will guess:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_data %&amp;gt;% 
  left_join(national_libraries)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;state&amp;quot;, &amp;quot;year&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 7
##   state  year unemployment inflation population libraries schools
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 GA     2018          5         2          100        NA      NA
## 2 GA     2019          5.3       1.8        200        NA      NA
## 3 GA     2020          5.2       2.5        300        NA      NA
## 4 NC     2018          6.1       1.8        350       200     610
## 5 NC     2019          5.9       1.6        375       210     590
## 6 NC     2020          5.3       1.8        400       220     530
## 7 CO     2018          4.7       2.7        200       230     470
## 8 CO     2019          4.4       2.6        300       240     440
## 9 CO     2020          5.1       2.5        400       270     510&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s good practice to be specific about the columns you want and actually use &lt;code&gt;by&lt;/code&gt;, but I will often run &lt;code&gt;left_join()&lt;/code&gt; without it and then copy the message that it generates (“&lt;code&gt;by = c(&#34;state&#34;, &#34;year&#34;)&lt;/code&gt;”) and paste it into my code.&lt;/p&gt;
&lt;p&gt;But what if the column names don’t match? Let’s rename the state column in our state/region table for fun:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;state_regions_different &amp;lt;- state_regions %&amp;gt;% 
  rename(ST = state)
state_regions_different&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 51 x 2
##    region    ST   
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;
##  1 West      AK   
##  2 South     AL   
##  3 South     AR   
##  4 West      AZ   
##  5 West      CA   
##  6 West      CO   
##  7 Northeast CT   
##  8 South     DC   
##  9 South     DE   
## 10 South     FL   
## # … with 41 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now watch what happens when we try to join the datasets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_data %&amp;gt;% 
  left_join(state_regions_different)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: `by` required, because the data sources have no common variables&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are no common variables, so we get an error. The &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;ST&lt;/code&gt; columns really are common variables, but R doesn’t know that.&lt;/p&gt;
&lt;p&gt;We have two options:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Rename one of the columns so it matches (either change &lt;code&gt;state&lt;/code&gt; to &lt;code&gt;ST&lt;/code&gt; or change &lt;code&gt;ST&lt;/code&gt; to &lt;code&gt;state&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Tell &lt;code&gt;left_join()&lt;/code&gt; which columns are the same&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can do option two by modifying the &lt;code&gt;by&lt;/code&gt; argument like so:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_data %&amp;gt;% 
  left_join(state_regions_different, by = c(&amp;quot;state&amp;quot; = &amp;quot;ST&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 6
##   state  year unemployment inflation population region
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; 
## 1 GA     2018          5         2          100 South 
## 2 GA     2019          5.3       1.8        200 South 
## 3 GA     2020          5.2       2.5        300 South 
## 4 NC     2018          6.1       1.8        350 South 
## 5 NC     2019          5.9       1.6        375 South 
## 6 NC     2020          5.3       1.8        400 South 
## 7 CO     2018          4.7       2.7        200 West  
## 8 CO     2019          4.4       2.6        300 West  
## 9 CO     2020          5.1       2.5        400 West&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;right_join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;right_join()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Once again, &lt;a href=&#34;https://github.com/gadenbuie/tidyexplain#right-join&#34; target=&#34;_blank&#34;&gt;go to this page in a new tab&lt;/a&gt; and watch the animation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;right_join()&lt;/code&gt; works exactly like &lt;code&gt;left_join()&lt;/code&gt;, but in reverse. The &lt;em&gt;second&lt;/em&gt; dataset is the base data. Any rows in the second dataset that don’t match in the first will be kept, and any rows from the first that don’t match will get thrown away.&lt;/p&gt;
&lt;p&gt;Watch what happens if we right join &lt;code&gt;national_data&lt;/code&gt; and &lt;code&gt;state_regions&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;national_data %&amp;gt;% 
  right_join(state_regions, by = &amp;quot;state&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 57 x 6
##    state  year unemployment inflation population region   
##    &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    
##  1 AK       NA         NA        NA           NA West     
##  2 AL       NA         NA        NA           NA South    
##  3 AR       NA         NA        NA           NA South    
##  4 AZ       NA         NA        NA           NA West     
##  5 CA       NA         NA        NA           NA West     
##  6 CO     2018          4.7       2.7        200 West     
##  7 CO     2019          4.4       2.6        300 West     
##  8 CO     2020          5.1       2.5        400 West     
##  9 CT       NA         NA        NA           NA Northeast
## 10 DC       NA         NA        NA           NA South    
## # … with 47 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yikes. R kept all the rows in &lt;code&gt;state_regions&lt;/code&gt;, brought in the columns from &lt;code&gt;national_data&lt;/code&gt; and filled most of the new columns with &lt;code&gt;NA&lt;/code&gt;, and then repeated Colorado (and NC and GA) three times for each of the years from &lt;code&gt;national_data&lt;/code&gt;. That’s a mess.&lt;/p&gt;
&lt;p&gt;If we reverse the order, we’ll get the correct merged data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;state_regions %&amp;gt;% 
  right_join(national_data, by = &amp;quot;state&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 6
##   region state  year unemployment inflation population
##   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 South  GA     2018          5         2          100
## 2 South  GA     2019          5.3       1.8        200
## 3 South  GA     2020          5.2       2.5        300
## 4 South  NC     2018          6.1       1.8        350
## 5 South  NC     2019          5.9       1.6        375
## 6 South  NC     2020          5.3       1.8        400
## 7 West   CO     2018          4.7       2.7        200
## 8 West   CO     2019          4.4       2.6        300
## 9 West   CO     2020          5.1       2.5        400&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I rarely use &lt;code&gt;right_join()&lt;/code&gt; because I find it more intuitive to just use &lt;code&gt;left_join()&lt;/code&gt; since in my head, I’m taking a dataset and stacking columns onto the end of it. If you want to right join instead, neat—just remember to order things correctly.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Text</title>
      <link>https://uvaDS8104.github.io/lesson/13-lesson/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/13-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There’s no lesson for this session. In your exercise today you’ll visualize text data using &lt;a href=&#34;https://www.tidytextmining.com/&#34;&gt;&lt;strong&gt;tidytext&lt;/strong&gt;&lt;/a&gt;, and the best way to figure that out is to just play with data.&lt;/p&gt;
&lt;p&gt;So head over to &lt;a href=&#34;https://uvaDS8104.github.io/example/13-example/&#34;&gt;the example&lt;/a&gt; to see how it’s done, or &lt;a href=&#34;https://uvaDS8104.github.io/assignment/13-exercise/&#34;&gt;the exercise&lt;/a&gt; to get started!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enhancing graphics</title>
      <link>https://uvaDS8104.github.io/lesson/14-lesson/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/14-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There’s no lesson for this session. In your exercise today you’ll export a plot from ggplot, open it in a vector editor like &lt;a href=&#34;https://www.adobe.com/products/illustrator.html&#34;&gt;Illustrator&lt;/a&gt;, &lt;a href=&#34;https://inkscape.org/&#34;&gt;Inkscape&lt;/a&gt;, or &lt;a href=&#34;https://www.designer.io/en/&#34;&gt;Gravit Designer&lt;/a&gt;, and make it extra pretty and well-designed. The best way to learn this is by actually doing it.&lt;/p&gt;
&lt;p&gt;So head over to &lt;a href=&#34;https://uvaDS8104.github.io/example/14-example/&#34;&gt;the example&lt;/a&gt; to see how it’s done, or &lt;a href=&#34;https://uvaDS8104.github.io/assignment/14-exercise/&#34;&gt;the exercise&lt;/a&gt; to get started!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Truth, beauty, and data revisited</title>
      <link>https://uvaDS8104.github.io/lesson/15-lesson/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/lesson/15-lesson/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There’s no lesson for this session. You made it to the end of the course! Congratulations!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why study networks?</title>
      <link>https://uvaDS8104.github.io/content/01-content/</link>
      <pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/content/01-content/</guid>
      <description>&lt;h2 id=&#34;readings&#34;&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class=&#34;fas fa-book&#34;&gt;&lt;/i&gt; 
&lt;a href=&#34;http://socviz.co/lookatdata.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chapters 1 &amp;amp; 2&lt;/a&gt; in Easley &amp;amp; Kleinberg, &lt;em&gt;Networks, crowds, and markets: Reasoning about a highly connected world&lt;/em&gt;   
&lt;a href=&#34;https://www.cs.cornell.edu/home/kleinber/networks-book/networks-book.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The full book is here, too.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class=&#34;fas fa-file-pdf&#34;&gt;&lt;/i&gt; Butts, Carter T. (2009) 
&lt;a href=&#34;https://www.science.org/doi/10.1126/science.1171022&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Revisiting the foundations of network analysis.&amp;rdquo;&lt;/a&gt; &lt;em&gt;Science&lt;/em&gt; &lt;strong&gt;325&lt;/strong&gt;, no. 5939: 414-416.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;slides&#34;&gt;Slides&lt;/h2&gt;
&lt;p&gt;The slides for today&amp;rsquo;s lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Schedule</title>
      <link>https://uvaDS8104.github.io/schedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/schedule/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Here’s your roadmap for the mini-mester!&lt;/p&gt;
&lt;p&gt;Every class session has four important sections. You should read about the details for each using the main menu at the top of this webpage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/content/&#34;&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/a&gt; (&lt;i class=&#34;fas fa-book-reader&#34;&gt;&lt;/i&gt;): This page contains the readings, slides, and recorded lectures for the topic. Read and watch these first each day.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/&#34;&gt;&lt;strong&gt;Lesson&lt;/strong&gt;&lt;/a&gt; (&lt;i class=&#34;fas fa-chalkboard-teacher&#34;&gt;&lt;/i&gt;): This page contains an interactive lesson that teaches you the principles and code you need to know. Go through these after doing the content.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/a&gt; (&lt;i class=&#34;fas fa-laptop-code&#34;&gt;&lt;/i&gt;): This page contains fully annotated R code that you can use as a reference for creating your own visualizations. This is only a reference page—you don’t have to necessarily do anything here. Each section also contains videos of me live coding the examples so you can see what it looks like to work with R in real time. This page will be &lt;em&gt;very&lt;/em&gt; helpful as you work on your assignments.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/&#34;&gt;&lt;strong&gt;Assignment&lt;/strong&gt;&lt;/a&gt; (&lt;i class=&#34;fas fa-pencil-ruler&#34;&gt;&lt;/i&gt;): This page contains the instructions for either the session exercise (1–3 brief tasks), or for the two mini projects and final project. &lt;strong&gt;Assignments are due by 11:59 PM on the day they’re listed.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: You should follow this general process each day:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do everything on the content (&lt;i class=&#34;fas fa-book-reader&#34;&gt;&lt;/i&gt;) page&lt;/li&gt;
&lt;li&gt;Work through the lesson (&lt;i class=&#34;fas fa-chalkboard-teacher&#34;&gt;&lt;/i&gt;) page&lt;/li&gt;
&lt;li&gt;Complete the assignment (&lt;i class=&#34;fas fa-pencil-ruler&#34;&gt;&lt;/i&gt;) while referencing the example (&lt;i class=&#34;fas fa-laptop-code&#34;&gt;&lt;/i&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;table class=&#34;table schedule&#34; style=&#34;max-width:100%&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;span class=&#34;fake-header-table&#34;&gt;Foundations&lt;/span&gt;&lt;/td&gt;

            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Content&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Lesson&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Example&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Assignment&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 11&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Truth, beauty, and data + R and tidyverse&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/01-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/01-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/01-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/01-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 12&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Graphic design&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/02-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/02-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/02-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/02-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 13&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Mapping data to graphics&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/03-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/03-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/03-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/03-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;span class=&#34;fake-header-table&#34;&gt;Core types of graphics&lt;/span&gt;&lt;/td&gt;

            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Content&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Lesson&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Example&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Assignment&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 14&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Amounts and proportions&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/04-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/04-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/04-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/04-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 15&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Themes&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/05-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/05-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/05-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/05-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 18&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Uncertainty&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/06-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/06-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/06-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/06-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 19&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Relationships&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/07-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/07-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/07-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/07-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 20&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Comparisons&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/08-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/08-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/08-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/08-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 21&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Annotations&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/09-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/09-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/09-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/09-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 22&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt; &lt;strong&gt;Mini project 1 due&lt;/strong&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/01-mini-project/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;span class=&#34;fake-header-table&#34;&gt;Special applications&lt;/span&gt;&lt;/td&gt;

            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Content&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Lesson&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Example&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Assignment&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 22&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Interactivity&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/10-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/10-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/10-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/10-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 26&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Time&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/11-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/11-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/11-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/11-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 27&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Space&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/12-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/12-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/12-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/12-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 28&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Text&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/13-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/13-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/13-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/13-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 29&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Enhancing graphics&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/14-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/14-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/14-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/14-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;May 29&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt; &lt;strong&gt;Mini project 2 due&lt;/strong&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/02-mini-project/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;span class=&#34;fake-header-table&#34;&gt;Conclusions&lt;/span&gt;&lt;/td&gt;

            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Content&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Lesson&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Example&lt;/td&gt;
            &lt;td style=&#34;width:8%;text-align:center&#34; class=&#34;mid-table-header&#34;&gt;Assignment&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;June 1&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;Truth, beauty, and data revisited&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a
                    href=&#34;https://uvaDS8104.github.io/content/15-content/&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/lesson/15-lesson/&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/example/15-example/&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/15-exercise/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align=&#34;right&#34; style=&#34;width:18%;text-align:right&#34;&gt;June 5&lt;/td&gt;
            &lt;td style=&#34;width:50%;text-align:left&#34;&gt;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt; &lt;strong&gt;Final project due&lt;/strong&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-book-reader fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-chalkboard-teacher fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;
                &lt;font color=&#34;f1f1f1&#34;&gt;
                    &lt;i class=&#34;fas fa-laptop-code fa-lg&#34;&gt;&lt;/i&gt;&lt;/font&gt;
            &lt;/td&gt;
            &lt;td align=&#34;center&#34; style=&#34;width:10%;text-align:center&#34;&gt;&lt;a href=&#34;https://uvaDS8104.github.io/assignment/final-project/&#34;&gt;
                    &lt;i class=&#34;fas fa-pencil-ruler fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;

    &lt;/tbody&gt;

&lt;/table&gt;

</description>
    </item>
    
    <item>
      <title>Syllabus</title>
      <link>https://uvaDS8104.github.io/syllabus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uvaDS8104.github.io/syllabus/</guid>
      <description>
&lt;script src=&#34;https://uvaDS8104.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#course-objectives&#34;&gt;Course objectives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#important-pep-talk&#34;&gt;Important pep talk!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#course-materials&#34;&gt;Course materials&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#books-articles-and-other-materials&#34;&gt;Books, articles, and other materials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r-and-rstudio&#34;&gt;R and RStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#online-help&#34;&gt;Online help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#course-policies&#34;&gt;Course policies&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#student-hours&#34;&gt;Student hours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#class-conduct-and-expectations&#34;&gt;Class conduct and expectations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#learning-during-a-pandemic&#34;&gt;Learning during a pandemic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#counseling-and-psychological-services-cps&#34;&gt;Counseling and Psychological Services (CPS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#basic-needs-security&#34;&gt;Basic needs security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#laurens-promise&#34;&gt;Lauren’s Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#academic-honesty&#34;&gt;Academic honesty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#special-needs&#34;&gt;Special needs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#assignments-and-grades&#34;&gt;Assignments and grades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#star-wars&#34;&gt;Star Wars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
        &lt;h3&gt;Instructor&lt;/h3&gt;

        &lt;ul class=&#34;icon-list&#34;&gt;
            &lt;li&gt;&lt;i class=&#34;fas fa-user&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://www.alexandergates.net&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Dr. Alexander Gates&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;fas fa-university&#34;&gt;&lt;/i&gt; 164A Elson Hall&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;fas fa-envelope&#34;&gt;&lt;/i&gt; &lt;a href=&#34;mailto:agates@virginia.edu&#34;&gt; agates@virginia.edu&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;fab fa-twitter&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://twitter.com/complexgates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; @complexgates&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;fas fa-calendar-check&#34;&gt;&lt;/i&gt; &lt;a href=&#34;https://calendly.com/ajgates42/30min/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Schedule an appointment&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;div class=&#34;col-md-4&#34;&gt;
        &lt;h3&gt;Course details&lt;/h3&gt;

        &lt;ul class=&#34;icon-list&#34;&gt;
            &lt;li&gt;&lt;i class=&#34;far fa-calendar&#34;&gt;&lt;/i&gt; Tu, Th&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;far fa-calendar-alt&#34;&gt;&lt;/i&gt; January 19 - April 27, 2023&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;far fa-clock&#34;&gt;&lt;/i&gt; 2:00pm - 3:15pm&lt;/li&gt;
            &lt;li&gt;&lt;i class=&#34;fas fa-university&#34;&gt;&lt;/i&gt; Elliwood Conference Room&lt;/li&gt;
            
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;div class=&#34;col-md-4 contact-policy&#34;&gt;
        &lt;h3&gt;Contacting me&lt;/h3&gt;

        &lt;p&gt;E-mail is the best way to get in contact with me. I will try to respond to all course-related e-mails within 24 hours (&lt;em&gt;yup&lt;/em&gt;), but also remember that life can be busy and chaotic for everyone (including me!), so if I don&amp;rsquo;t respond right away, don&amp;rsquo;t worry!&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;course-objectives&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Course objectives&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Data rarely speaks for itself.&lt;/strong&gt; On their own, the facts contained in raw data are difficult to understand, and in the absence of beauty and order, it is impossible to understand the truth that the data shows.&lt;/p&gt;
&lt;p&gt;In this class, you’ll learn how to use industry-standard graphic and data design techniques to create beautiful, understandable visualizations and uncover truth in data.&lt;/p&gt;
&lt;p&gt;By the end of this course, you will become (1) literate in data and graphic design principles, and (2) an ethical data communicator, by producing beautiful, powerful, and clear visualizations of your own data. Specifically, you should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand the principles of data and graphic design&lt;/li&gt;
&lt;li&gt;Evaluate the credibility, ethics, and aesthetics of data visualizations&lt;/li&gt;
&lt;li&gt;Create well-designed data visualizations with appropriate tools&lt;/li&gt;
&lt;li&gt;Share data and graphics in open forums&lt;/li&gt;
&lt;li&gt;Be curious and confident in consuming and producing data visualizations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This class will expose you to &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;R&lt;/a&gt;—one of the most popular, sought-after, and in-demand statistical programming languages. Armed with the foundation of R skills you’ll learn in this class, you’ll know enough to be able to find how to visualize and analyze any sort of data-based question in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;important-pep-talk&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Important pep talk!&lt;/h2&gt;
&lt;p&gt;I &lt;em&gt;promise&lt;/em&gt; you can succeed in this class.&lt;/p&gt;
&lt;p&gt;Learning R can be difficult at first—it’s like learning a new language, just like Spanish, French, or Chinese. Hadley Wickham—the chief data scientist at RStudio and the author of some amazing R packages you’ll be using like &lt;strong&gt;ggplot2&lt;/strong&gt;—&lt;a href=&#34;https://r-posts.com/advice-to-young-and-old-programmers-a-conversation-with-hadley-wickham/&#34;&gt;made this wise observation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s easy when you start out programming to get really frustrated and think, “Oh it’s me, I’m really stupid,” or, “I’m not made out to program.” But, that is absolutely not the case. Everyone gets frustrated. I still get frustrated occasionally when writing R code. It’s just a natural part of programming. So, it happens to everyone and gets less and less over time. Don’t blame yourself. Just take a break, do something fun, and then come back and try again later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even experienced programmers find themselves bashing their heads against seemingly intractable errors. If you’re finding yourself taking way too long hitting your head against a wall and not understanding, take a break, talk to classmates, e-mail me, etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/syllabus/hosrt_error_tweet.png&#34; width=&#34;60%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/allison_horst/status/1213275783675822080&#34;&gt;&lt;img src=&#34;https://uvaDS8104.github.io/img/syllabus/gator_error.jpg&#34; alt=&#34;Alison Horst: Gator error&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;course-materials&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Course materials&lt;/h2&gt;
&lt;p&gt;All of the readings and software in this class are &lt;strong&gt;free&lt;/strong&gt;. There are free online version of all the textbooks, R and RStudio are inherently free, and GSU provides &lt;a href=&#34;https://technology.gsu.edu/technology-services/it-services/software-computer-purchase/software-download-and-purchase/adobe-creative-cloud/&#34;&gt;free access to Adobe Illustrator&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;books-articles-and-other-materials&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Books, articles, and other materials&lt;/h3&gt;
&lt;p&gt;We’ll rely heavily on these books, which are all available online (&lt;strong&gt;for free!&lt;/strong&gt;). I recommend getting the printed versions of these books if you are interested, but it is not required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;citation&#34;&gt;Alberto Cairo, &lt;em&gt;The Truthful Art: Data, Charts, and Maps for Communication&lt;/em&gt; (Berkeley, California: New Riders, 2016).&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;$27&lt;/span&gt; used, &lt;span&gt;$32&lt;/span&gt; new at &lt;a href=&#34;https://www.amazon.com/Truthful-Art-Data-Charts-Communication/dp/0321934075&#34;&gt;Amazon&lt;/a&gt;. A &lt;strong&gt;free&lt;/strong&gt; eBook version is available through GSU’s library through O’Reilly’s Higher Education database. The easiest way to access it is to visit a special URL (&lt;a href=&#34;http://go.oreilly.com/georgia-state-university&#34; class=&#34;uri&#34;&gt;http://go.oreilly.com/georgia-state-university&lt;/a&gt;), log in with your GSU account, and then search for “The Truthful Art”.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;citation&#34;&gt;Kieran Healy, &lt;em&gt;Data Visualization: A Practical Introduction&lt;/em&gt; (Princeton: Princeton University Press, 2018), &lt;a href=&#34;http://socviz.co/&#34; role=&#34;doc-biblioref&#34;&gt;http://socviz.co/&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://socviz.co/&#34;&gt;&lt;strong&gt;FREE&lt;/strong&gt; online&lt;/a&gt;; &lt;span&gt;$30&lt;/span&gt; used, &lt;span&gt;$36&lt;/span&gt; new at &lt;a href=&#34;https://www.amazon.com/Data-Visualization-Introduction-Kieran-Healy/dp/0691181624/&#34;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;citation&#34;&gt;Claus E. Wilke, &lt;em&gt;Fundamentals of Data Visualization&lt;/em&gt; (Sebastopol, California: O’Reilly Media, 2018), &lt;a href=&#34;https://serialmentor.com/dataviz/&#34; role=&#34;doc-biblioref&#34;&gt;https://serialmentor.com/dataviz/&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://serialmentor.com/dataviz/&#34;&gt;&lt;strong&gt;FREE&lt;/strong&gt; online&lt;/a&gt;; &lt;span&gt;$32&lt;/span&gt; new at &lt;a href=&#34;https://www.amazon.com/Fundamentals-Data-Visualization-Informative-Compelling/dp/1492031089&#34;&gt;Amazon&lt;/a&gt;. An eBook version is also available through &lt;a href=&#34;http://go.oreilly.com/georgia-state-university&#34;&gt;the O’Reilly database&lt;/a&gt;, but you can just use &lt;a href=&#34;https://serialmentor.com/dataviz/&#34;&gt;the online version&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There will occasionally be additional articles and videos to read and watch. When this happens, links to these other resources will be included on the content page for that session.&lt;/p&gt;
&lt;p&gt;I also highly recommend subscribing to the &lt;a href=&#34;https://rweekly.org/&#34;&gt;R Weekly newsletter&lt;/a&gt;. This e-mail is sent every Monday and is full of helpful tutorials about how to do stuff with R.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r-and-rstudio&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;R and RStudio&lt;/h3&gt;
&lt;p&gt;You will do all of your analysis with the open source (and free!) programming language &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;R&lt;/a&gt;. You will use &lt;a href=&#34;https://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt; as the main program to access R. &lt;strong&gt;Think of R as an engine and RStudio as a car dashboard&lt;/strong&gt;—R handles all the calculations produces the actual statistics and graphical output, while RStudio provides a nice interface for running R code.&lt;/p&gt;
&lt;p&gt;R is free, but it can sometimes be a pain to install and configure. To make life easier, you can (and should!) use the free &lt;a href=&#34;http://rstudio.cloud/&#34;&gt;RStudio.cloud&lt;/a&gt; service, which lets you run a full instance of RStudio in your web browser. This means you won’t have to install anything on your computer to get started with R! We will have a shared class workspace in RStudio.cloud that will let you quickly copy templates for examples, exercises, and mini projects.&lt;/p&gt;
&lt;p&gt;RStudio.cloud is convenient, but it can be slow and it is not designed to be able to handle larger datasets or more complicated analysis and graphics. You also can’t use your own custom fonts with RStudio.cloud. Over the course of the semester, you’ll probably want to get around to installing R, RStudio, and other R packages on your computer and wean yourself off of RStudio.cloud. This isn’t 100% necessary, but it’s helpful.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&#34;https://uvaDS8104.github.io/resource/install/&#34;&gt;find instructions for installing R, RStudio, and all the tidyverse packages here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;online-help&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Online help&lt;/h3&gt;
&lt;p&gt;Data science and statistical programming can be difficult. Computers are stupid and little errors in your code can cause hours of headache (even if you’ve been doing this stuff for years!).&lt;/p&gt;
&lt;p&gt;Fortunately there are tons of online resources to help you with this. Two of the most important are &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt; (a Q&amp;amp;A site with hundreds of thousands of answers to all sorts of programming questions) and &lt;a href=&#34;https://community.rstudio.com/&#34;&gt;RStudio Community&lt;/a&gt; (a forum specifically designed for people using RStudio and the tidyverse (i.e. you)).&lt;/p&gt;
&lt;p&gt;If you use Twitter, post R-related questions and content with &lt;a href=&#34;https://twitter.com/search?q=%23rstats&#34;&gt;#rstats&lt;/a&gt;. The community there is exceptionally generous and helpful.&lt;/p&gt;
&lt;p&gt;Searching for help with R on Google can sometimes be tricky because the program name is, um, a single letter. Google is generally smart enough to figure out what you mean when you search for “r scatterplot”, but if it does struggle, try searching for “rstats” instead (e.g. “rstats scatterplot”). Also, since most of your R work will deal with &lt;strong&gt;ggplot2&lt;/strong&gt;, it’s often easier to just search for that instead of the letter “r” (e.g. “ggplot scatterplot”).&lt;/p&gt;
&lt;p&gt;Additionally, we have a class chatroom at &lt;a href=&#34;https://gsudatavizm2020.slack.com&#34;&gt;Slack&lt;/a&gt; where anyone in the class can ask questions and anyone can answer. &lt;strong&gt;I will monitor Slack regularly and will respond quickly.&lt;/strong&gt; (It’s one of the rare Slack workspaces where I actually have notifications enabled!) Ask questions about the readings, exercises, and mini projects. You’ll likely have similar questions as your peers, and you’ll likely be able to answer other peoples’ questions too.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;course-policies&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Course policies&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Be nice. Be honest. Don’t cheat.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We will also follow &lt;a href=&#34;https://codeofconduct.gsu.edu/&#34;&gt;Georgia State’s Code of Conduct&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This syllabus reflects a plan for the mini-mester. Deviations may become necessary as the course progresses.&lt;/p&gt;
&lt;div id=&#34;student-hours&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Student hours&lt;/h3&gt;
&lt;p&gt;Please watch this video:&lt;/p&gt;
&lt;iframe src=&#34;https://player.vimeo.com/video/270014784&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; fullscreen&#34; allowfullscreen style=&#34;display: block; margin: 0 auto 1rem;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Student hours are set times dedicated to all of you (most professors call these “office hours”; I don’t&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;). This means that I will be &lt;del&gt;in my office&lt;/del&gt; at home (wistfully) waiting for you to &lt;del&gt;come by&lt;/del&gt; talk to me remotely with whatever questions you have. This is the best and easiest way to find me and the best chance for discussing class material and concerns.&lt;/p&gt;
&lt;p&gt;Because of the pandemic, we cannot meet in person. I can meet you online via Webex. Use this link for regular student hours: &lt;a href=&#34;https://gsumeetings.webex.com/meet/aheiss&#34; class=&#34;uri&#34;&gt;https://gsumeetings.webex.com/meet/aheiss&lt;/a&gt;. You can also easily [make an appointment You can also find me through e-mail and Slack.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;class-conduct-and-expectations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Class conduct and expectations&lt;/h3&gt;
&lt;p&gt;Here are the rules, expectations, and policies that we came up with collectively:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Late work&lt;/strong&gt;: You will lose 1 point per day for each day an assigment or problem set is late. After 1 week, I will send a reminder e-mail. After 2 weeks, you will receive no points.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technology use&lt;/strong&gt;: Use phones, computers, etc. responsibly. You’re all adults.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Participation&lt;/strong&gt;: Ensure that you are engaged and participate in class. Engagement is defined by you—if that means commenting and answering questions, neat; if it means sitting quietly and being focused, also neat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;learning-during-a-pandemic&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Learning during a pandemic&lt;/h3&gt;
&lt;p&gt;Life absolutely sucks right now.&lt;/p&gt;
&lt;p&gt;You most likely know people who have lost their jobs, have tested positive for COVID-19, have been hospitalized, or perhaps have even died. You all have increased (or possibly decreased) work responsibilities and increased family care responsibilities—you might be caring for extra people (young and/or old!) right now, and you are likely facing uncertain job prospects (or have been laid off!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I’m fully committed to making sure that you learn everything you were hoping to learn from this class!&lt;/strong&gt; I will make whatever accommodations I can to help you finish your exercises, do well on your projects, and learn and understand the class material. Under ordinary conditions, I am flexible and lenient with grading and course expectations when students face difficult challenges. Under pandemic conditions, that flexibility and leniency is intensified.&lt;/p&gt;
&lt;p&gt;If you feel like you’re behind or not understanding everything, &lt;strong&gt;do not suffer in silence!&lt;/strong&gt; Talk to me! &lt;em&gt;Please&lt;/em&gt; sign up for a time to meet with me during student hours at &lt;a href=&#34;https://calendly.com/andrewheiss/meeting/&#34; class=&#34;uri&#34;&gt;https://calendly.com/andrewheiss/meeting/&lt;/a&gt;. I’m also available through e-mail and Slack. Remember, this is the only Slack account where I’ve enabled notifications!&lt;/p&gt;
&lt;p&gt;I want you to learn lots of things from this class (Graphic design! Fancy charts! R! ggplot!), but I primarily want you to stay healthy, balanced, and grounded during this crisis.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;counseling-and-psychological-services-cps&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Counseling and Psychological Services (CPS)&lt;/h3&gt;
&lt;p&gt;Life at GSU can be complicated and challenging (especially during a pandemic!). You might feel overwhelmed, experience anxiety or depression, or struggle with relationships or family responsibilities. &lt;a href=&#34;https://education.gsu.edu/cps/&#34;&gt;Counseling and Psychological Services (CPS)&lt;/a&gt; provides free, &lt;em&gt;confidential&lt;/em&gt; support for students who are struggling with mental health and emotional challenges. The CPS office is staffed by professional psychologists who are attuned to the needs of all types of college and professional students. Please do not hesitate to contact CPS for assistance—getting help is a smart and courageous thing to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-needs-security&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Basic needs security&lt;/h3&gt;
&lt;p&gt;If you have difficulty affording groceries or accessing sufficient food to eat every day, or if you lack a safe and stable place to live, and you believe this may affect your performance in this course, please contact the &lt;a href=&#34;https://deanofstudents.gsu.edu/&#34;&gt;Dean of Students&lt;/a&gt; for support. They can provide a host of services including free groceries from the &lt;a href=&#34;https://nutrition.gsu.edu/panther-pantry/&#34;&gt;Panther Pantry&lt;/a&gt; and assisting with homelessness with the &lt;a href=&#34;https://deanofstudents.gsu.edu/student-assistance/embark/&#34;&gt;Embark Network&lt;/a&gt;. Additionally, please talk to me if you are comfortable in doing so. This will enable me to provide any resources that I might possess.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;laurens-promise&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Lauren’s Promise&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;I will listen and believe you if someone is threatening you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lauren McCluskey, a 21-year-old honors student athlete, &lt;a href=&#34;https://www.sltrib.com/opinion/commentary/2019/02/10/commentary-failing-lauren/&#34;&gt;was murdered on October 22, 2018 by a man she briefly dated on the University of Utah campus&lt;/a&gt;. We must all take action to ensure that this never happens again.&lt;/p&gt;
&lt;p&gt;If you are in immediate danger, call 911 or GSU police (404-413-3333).&lt;/p&gt;
&lt;p&gt;If you are experiencing sexual assault, domestic violence, or stalking, please report it to me and I will connect you to resources or call &lt;a href=&#34;https://counselingcenter.gsu.edu/crisis-services/concern-self/immediate-help/&#34;&gt;GSU’s Counseling and Psychological Services&lt;/a&gt; (404-413-1640).&lt;/p&gt;
&lt;p&gt;Any form of sexual harassment or violence will not be excused or tolerated at Georgia State. GSU has instituted procedures to respond to violations of these laws and standards, programs aimed at the prevention of such conduct, and intervention on behalf of the victims. Georgia State University Police officers will treat victims of sexual assault, domestic violence, and stalking with respect and dignity. Advocates on campus and in the community can help with victims’ physical and emotional health, reporting options, and academic concerns.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;academic-honesty&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Academic honesty&lt;/h3&gt;
&lt;p&gt;Violation of &lt;a href=&#34;https://deanofstudents.gsu.edu/faculty-staff-resources/academic-honesty/&#34;&gt;GSU’s Policy on Academic Honesty&lt;/a&gt; will result in an F in the course and possible disciplinary action.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; All violations will be formally reported to the Dean of Students.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;special-needs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Special needs&lt;/h3&gt;
&lt;p&gt;Students who wish to request accommodation for a disability may do so by registering with the &lt;a href=&#34;https://disability.gsu.edu/&#34;&gt;Office of Disability Services&lt;/a&gt;. Students may only be accommodated upon issuance by the Office of Disability Services of a signed &lt;a href=&#34;https://disability.gsu.edu/services/how-to-register/&#34;&gt;Accommodation Plan&lt;/a&gt; and are responsible for providing a copy of that plan to instructors of all classes in which accommodations are sought.&lt;/p&gt;
&lt;p&gt;Students with special needs should then make an appointment with me during the first week of class to discuss any accommodations that need to be made.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;assignments-and-grades&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Assignments and grades&lt;/h2&gt;
&lt;p&gt;You can find descriptions for all the assignments on the &lt;a href=&#34;https://uvaDS8104.github.io/assignment/&#34;&gt;assignments page&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;centered-table&#34;&gt;
&lt;table style=&#34;width:60%;&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;13%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Assignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Points&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Percent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Reflections (15 × 10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;150&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;23%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Exercises (15 × 10)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;150&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;23%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Mini project 1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;75&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Mini project 2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;75&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Final project&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;200&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;31%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Total&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;650&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;centered-table&#34;&gt;


&lt;table style=&#34;width:49%;&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;11%&#34; /&gt;
&lt;col width=&#34;13%&#34; /&gt;
&lt;col width=&#34;11%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Grade&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Range&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Grade&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Range&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;93–100%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;73–76%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;A−&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;90–92%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C−&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;70–72%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B+&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;87–89%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;D+&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;67–69%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;83–86%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;D&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;63–66%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;B−&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;80–82%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;D−&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;60–62%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;C+&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;77–79%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;F&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;lt; 60%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div&gt;


&lt;/div&gt;
&lt;div id=&#34;star-wars&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Star Wars&lt;/h2&gt;
&lt;p&gt;Once you have read this entire syllabus and &lt;a href=&#34;https://uvaDS8104.github.io/assignment/&#34;&gt;the assignments page&lt;/a&gt;, please &lt;a href=&#34;mailto:aheiss@gsu.edu&#34;&gt;click here&lt;/a&gt; and e-mail me a picture of a &lt;em&gt;cute&lt;/em&gt; Star Wars character.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Brownie points if it’s animated.&lt;/p&gt;















&lt;figure &gt;



  &lt;img src=&#34;https://media.giphy.com/media/j4q4h9uWKWwnYT1k3Z/giphy.gif&#34; alt=&#34;Baby Yoda with IG-11&#34;  &gt;




&lt;/figure&gt;

&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;There’s fairly widespread misunderstanding about what office hours actually are! &lt;a href=&#34;https://www.chronicle.com/article/Can-This-Man-Change-How-Elite/245714/&#34;&gt;Many students often think that they are the times I &lt;em&gt;shouldn’t&lt;/em&gt; be disturbed&lt;/a&gt;, which is the exact opposite of what they’re for!&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;So seriously, just don’t cheat or plagiarize!&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;Baby Yoda, Babu Frik, porgs, etc. are all super fair game.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
